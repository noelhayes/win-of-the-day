This file is a merged representation of the entire codebase, combined into a single document.
Generated by Repomix on: 2025-02-21T06:23:32.136Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
app/
  (authenticated)/
    feed/
      page.jsx
    onboarding/
      page.jsx
    profile/
      [userId]/
        page.js
      edit/
        page.jsx
      page.jsx
    search/
      page.jsx
    layout.jsx
    README.md
  api/
    auth/
      callback/
        route.js
      signup/
        route.js
    follows/
      route.js
    notifications/
      [id]/
        route.js
      mark-read/
        route.js
    posts/
      [id]/
        route.js
      route.js
  globals.css
  layout.jsx
  page.jsx
components/
  common/
    GoogleSignInButton.jsx
    Navbar.jsx
    ProfileImageUpload.jsx
    SearchBar.jsx
    SignInForm.jsx
  feed/
    WinFeed.jsx
  notifications/
    NotificationBell.jsx
    NotificationItem.jsx
    NotificationList.jsx
    NotificationsDrawer.jsx
  post/
    EditPostForm.jsx
    NewPostForm.jsx
    Post.jsx
    PostGrid.jsx
  profile/
    FollowButton.jsx
    FriendsList.jsx
    GoalsList.jsx
    ProductivityDashboard.jsx
    ProfileHeader.jsx
    ProfileStats.jsx
  ui/
    CategoryChip.jsx
    ComingSoonToast.jsx
    ConfirmModal.jsx
    DeletePostDialog.tsx
    index.js
    Modal.jsx
    PostMenu.tsx
    ProfileCard.jsx
  index.js
  README.md
docs/
  vision.md
hooks/
  useNotifications.js
public/
  file.svg
  globe.svg
  grid.svg
  next.svg
  tailwind.css
  vercel.svg
  window.svg
styles/
  global.css
supabase/
  examples/
    20250207_01_add_post_reactions.sql
    20250207_02_add_post_comments.sql
    20250207_03_add_habit_streaks.sql
  functions/
    08_username_updates.sql
  migrations/
    20240207_update_post_policies.sql
  .gitignore
  01_profiles.sql
  02_follows.sql
  03_categories.sql
  04_posts.sql
  05_goals.sql
  06_storage.sql
  07_likes.sql
  08_follow_requests.sql
  09_notifications.sql
  config.toml
  README.md
utils/
  supabase/
    client.js
    middleware.js
    server.js
  auth-helpers.js
  config.js
  logger.js
.gitignore
.windsurfrules
eslint.config.mjs
jsconfig.json
middleware.js
next.config.js
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.json

================================================================
Files
================================================================

================
File: app/(authenticated)/feed/page.jsx
================
'use client';

import { useEffect, useState, useMemo } from 'react';
import { useRouter } from 'next/navigation';
import { WinFeed, NewPostForm } from '../../../components';
import { createClient } from '../../../utils/supabase/client';
import { Loader } from 'lucide-react';

export default function FeedPage() {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [shouldRefreshFeed, setShouldRefreshFeed] = useState(0);
  const router = useRouter();
  const supabase = useMemo(() => createClient(), []);

  useEffect(() => {
    let mounted = true;

    const loadUser = async () => {
      setError(null);
      try {
        const {
          data: { session },
          error: sessionError
        } = await supabase.auth.getSession();

        if (sessionError) {
          console.error('Session error:', sessionError);
          throw sessionError;
        }

        if (!session?.user) {
          console.log('No session found, redirecting to home');
          router.replace('/');
          return;
        }

        const userData = session.user;

        const { data: profile, error: profileError } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', userData.id)
          .single();

        if (profileError && profileError.code !== 'PGRST116') {
          console.error('Profile error:', profileError);
          throw profileError;
        }

        if (mounted) {
          setUser({
            ...userData,
            profile: profile || {
              id: userData.id,
              name: userData.email?.split('@')[0] || 'Anonymous',
              email: userData.email
            }
          });
        }
      } catch (err) {
        console.error('Error loading user:', err);
        if (mounted) {
          setError(err.message);
        }
      } finally {
        if (mounted) {
          setLoading(false);
        }
      }
    };

    loadUser();

    const {
      data: { subscription }
    } = supabase.auth.onAuthStateChange((event, session) => {
      console.log('Auth state changed:', event, session?.user?.id);
      if (event === 'SIGNED_OUT' || !session?.user) {
        router.replace('/');
        return;
      }
      if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {
        loadUser();
      }
    });

    return () => {
      mounted = false;
      subscription?.unsubscribe();
    };
  }, [router, supabase]);

  const handleNewPost = () => {
    // Trigger feed refresh by incrementing the key
    setShouldRefreshFeed(prev => prev + 1);
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="relative">
            <Loader className="w-8 h-8 animate-spin text-primary-500 mx-auto" />
            <div className="absolute inset-0 animate-ping rounded-full bg-primary-100 opacity-75" style={{ animationDuration: '2s' }}></div>
          </div>
          <p className="mt-4 text-gray-600 font-medium">Loading your feed...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="p-6 bg-red-50 rounded-2xl text-red-600 border border-red-100">
            <p className="font-medium">Unable to load your feed</p>
            <p className="text-sm mt-1 text-red-500">{error}</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100">
      {/* New Post Form */}
      <NewPostForm 
        currentUser={user} 
        onPostCreated={handleNewPost}
      />

      {/* Feed */}
      <div className="py-4">
        <WinFeed 
          key={shouldRefreshFeed} 
          currentUser={user} 
        />
      </div>
    </div>
  );
}

================
File: app/(authenticated)/onboarding/page.jsx
================
'use client';

import { createBrowserClient } from '@supabase/ssr'
import { redirect } from 'next/navigation'
import { useState, useEffect } from 'react'
import { CheckCircleIcon, XCircleIcon } from '@heroicons/react/24/outline'

export default function OnboardingPage() {
  const [user, setUser] = useState(null)
  const [username, setUsername] = useState('')
  const [usernameState, setUsernameState] = useState({
    isChecking: false,
    isValid: false,
    error: null
  })
  const [isLoading, setIsLoading] = useState(false)
  const [debounceTimeout, setDebounceTimeout] = useState(null)
  const supabase = createBrowserClient()

  useEffect(() => {
    checkUser()
    return () => {
      if (debounceTimeout) {
        clearTimeout(debounceTimeout)
      }
    }
  }, [])

  const checkUser = async () => {
    const { data: { user }, error } = await supabase.auth.getUser()
    if (error || !user) {
      redirect('/login')
    }
    setUser(user)

    // Check if user already has a username
    const { data: profile } = await supabase
      .from('profiles')
      .select('username')
      .eq('id', user.id)
      .single()

    if (profile?.username) {
      redirect('/')
    }
  }

  const validateUsername = (value) => {
    const formatRegex = /^[a-zA-Z][a-zA-Z0-9_]{2,19}$/
    return formatRegex.test(value)
  }

  const checkUsernameAvailability = async (value) => {
    if (!validateUsername(value)) {
      setUsernameState({
        isChecking: false,
        isValid: false,
        error: 'Username must be 3-20 characters, start with a letter, and contain only letters, numbers, or underscores'
      })
      return
    }

    setUsernameState(prev => ({ ...prev, isChecking: true, error: null }))

    try {
      const { data, error } = await supabase
        .from('profiles')
        .select('username')
        .eq('username', value)
        .single()

      if (error && error.code === 'PGRST116') {
        // No match found - username is available
        setUsernameState({
          isChecking: false,
          isValid: true,
          error: null
        })
      } else {
        setUsernameState({
          isChecking: false,
          isValid: false,
          error: 'Username already taken'
        })
      }
    } catch (err) {
      setUsernameState({
        isChecking: false,
        isValid: false,
        error: 'Error checking username availability'
      })
    }
  }

  const handleUsernameChange = (e) => {
    const { value } = e.target
    setUsername(value)
    
    if (debounceTimeout) {
      clearTimeout(debounceTimeout)
    }

    const newTimeout = setTimeout(() => {
      checkUsernameAvailability(value)
    }, 500)

    setDebounceTimeout(newTimeout)
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    if (!usernameState.isValid || usernameState.isChecking) return

    try {
      setIsLoading(true)

      const { error: updateError } = await supabase
        .from('profiles')
        .update({ 
          username,
          username_updated_at: new Date().toISOString()
        })
        .eq('id', user.id)

      if (updateError) throw updateError

      redirect('/')
    } catch (err) {
      console.error('Error updating username:', err)
      setUsernameState(prev => ({
        ...prev,
        error: 'Error saving username'
      }))
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="min-h-screen flex flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
          Welcome to Win of the Day!
        </h2>
        <p className="mt-2 text-center text-sm text-gray-600">
          Choose a username to get started
        </p>
      </div>

      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label htmlFor="username" className="block text-sm font-medium text-gray-700">
                Username
              </label>
              <div className="relative mt-1">
                <input
                  type="text"
                  id="username"
                  name="username"
                  value={username}
                  onChange={handleUsernameChange}
                  className="block w-full rounded-md border-gray-300 pr-10 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                  required
                />
                <div className="absolute inset-y-0 right-0 flex items-center pr-3">
                  {usernameState.isChecking ? (
                    <div className="h-5 w-5 animate-spin rounded-full border-b-2 border-gray-400" />
                  ) : username && (
                    usernameState.isValid ? (
                      <CheckCircleIcon className="h-5 w-5 text-green-500" />
                    ) : (
                      <XCircleIcon className="h-5 w-5 text-red-500" />
                    )
                  )}
                </div>
              </div>
              {usernameState.error && (
                <p className="mt-2 text-sm text-red-600">{usernameState.error}</p>
              )}
            </div>

            <button
              type="submit"
              disabled={!usernameState.isValid || usernameState.isChecking || isLoading}
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50"
            >
              {isLoading ? 'Saving...' : 'Continue'}
            </button>
          </form>
        </div>
      </div>
    </div>
  )
}

================
File: app/(authenticated)/profile/[userId]/page.js
================
'use client';

import { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Image from 'next/image';
import { createClient } from '../../../../utils/supabase/client';
import { 
  FollowButton, 
  ProfileStats, 
  PostGrid, 
  ProductivityDashboard,
  FriendsList,
  GoalsList,
  ProfileImageUpload
} from '../../../../components';
import { Edit3, MapPin, Link as LinkIcon, Plus } from 'lucide-react';
import Link from 'next/link';

export default function ProfilePage() {
  const { userId } = useParams();
  const [profile, setProfile] = useState(null);
  const [posts, setPosts] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [currentUser, setCurrentUser] = useState(null);
  const [isFollowing, setIsFollowing] = useState(false);
  const [isAddingGoal, setIsAddingGoal] = useState(false);
  const supabase = createClient();

  useEffect(() => {
    async function loadData() {
      try {
        setIsLoading(true);
        const [profileData, postsData, userData] = await Promise.all([
          supabase
            .from('profiles')
            .select('*')
            .eq('id', userId)
            .single(),

          supabase
            .from('posts')
            .select(`
              *,
              categories (
                name,
                color
              )
            `)
            .eq('user_id', userId)
            .order('created_at', { ascending: false }),

          supabase.auth.getUser()
        ]);

        if (profileData.error) throw profileData.error;
        if (postsData.error) throw postsData.error;

        setProfile(profileData.data);
        setPosts(postsData.data || []);
        setCurrentUser(userData.data.user);

        // Check if current user is following this profile
        if (userData.data.user && userId !== userData.data.user.id) {
          // Get current user's profile ID
          const { data: currentProfile, error: profileError } = await supabase
            .from('profiles')
            .select('id')
            .eq('user_id', userData.data.user.id)
            .single();

          if (!profileError && currentProfile) {
            const { data: followData } = await supabase
              .from('follows')
              .select('*')
              .eq('follower_id', currentProfile.id)
              .eq('following_id', userId)
              .maybeSingle();
            
            setIsFollowing(!!followData);
          }
        }
      } catch (error) {
        console.error('Error loading profile data:', error);
      } finally {
        setIsLoading(false);
      }
    }

    if (userId) {
      loadData();
    }
  }, [userId]);

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="w-8 h-8 border-4 border-indigo-500 border-t-transparent rounded-full animate-spin"></div>
      </div>
    );
  }

  if (!profile) {
    return (
      <div className="text-center py-12">
        <h1 className="text-2xl font-bold text-gray-900">Profile not found</h1>
        <p className="mt-2 text-gray-600">The user profile you're looking for doesn't exist.</p>
      </div>
    );
  }

  const isOwnProfile = currentUser?.id === userId;

  return (
    <div className="min-h-screen">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="bg-white rounded-lg shadow">
          {/* Profile Header */}
          <div className="p-6 flex flex-col md:flex-row md:items-start md:space-x-6">
            {/* Profile Image */}
            <div className="flex-shrink-0">
              <div className="relative h-32 w-32 md:h-40 md:w-40">
                {isOwnProfile ? (
                  <ProfileImageUpload
                    currentImage={profile.profile_image}
                    onUploadComplete={(url) => setProfile({ ...profile, profile_image: url })}
                    displayName={profile.username || profile.email?.split('@')[0] || 'U'}
                  />
                ) : profile.profile_image ? (
                  <Image
                    src={profile.profile_image}
                    alt={profile.username || 'Profile'}
                    fill
                    className="rounded-xl border-4 border-white shadow-lg object-cover"
                  />
                ) : (
                  <div className="h-full w-full bg-indigo-100 rounded-xl border-4 border-white shadow-lg flex items-center justify-center">
                    <span className="text-4xl font-bold text-indigo-600">
                      {(profile.username || profile.email?.split('@')[0] || 'U')[0].toUpperCase()}
                    </span>
                  </div>
                )}
              </div>
            </div>

            {/* Profile Info */}
            <div className="mt-6 md:mt-0 flex-1">
              <div className="flex flex-col-reverse md:flex-row md:items-center md:justify-between">
                <div>
                  <h1 className="text-2xl font-bold text-gray-900">
                    {profile.name || profile.username}
                  </h1>
                  <p className="text-gray-500">@{profile.username}</p>
                </div>
                <div className="flex space-x-3 mb-4 md:mb-0">
                  {isOwnProfile ? (
                    <Link
                      href="/profile/edit"
                      className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-lg shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                    >
                      <Edit3 className="h-4 w-4 mr-2" />
                      Edit Profile
                    </Link>
                  ) : (
                    <FollowButton targetUserId={userId} initialIsFollowing={isFollowing} />
                  )}
                </div>
              </div>

              <div className="mt-4 space-y-2">
                {profile.bio && (
                  <p className="text-gray-600 whitespace-pre-wrap">{profile.bio}</p>
                )}
                <div className="flex flex-wrap gap-4 text-sm text-gray-500">
                  {profile.location && (
                    <div className="flex items-center">
                      <MapPin className="h-4 w-4 mr-1" />
                      {profile.location}
                    </div>
                  )}
                  {profile.website && (
                    <a
                      href={profile.website}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="flex items-center hover:text-indigo-600"
                    >
                      <LinkIcon className="h-4 w-4 mr-1" />
                      {new URL(profile.website).hostname}
                    </a>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Stats Section */}
          <div className="border-t border-gray-200">
            <div className="p-6">
              <ProfileStats userId={userId} />
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div className="mt-8 grid grid-cols-1 gap-8">
          {/* Top Row: Productivity, Goals & Friends */}
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Productivity Section */}
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-xl font-bold text-gray-900 mb-6">Productivity</h2>
              <ProductivityDashboard userId={userId} />
            </div>

            {/* Goals Section */}
            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-bold text-gray-900">Goals</h2>
              </div>
              <GoalsList
                userId={userId}
                isOwnProfile={isOwnProfile}
                isAdding={isAddingGoal}
                onAddingChange={setIsAddingGoal}
              />
            </div>

            {/* Friends Section */}
            <FriendsList userId={userId} />
          </div>

          {/* Bottom Row: Posts Section */}
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-xl font-bold text-gray-900 mb-6">Posts</h2>
            <PostGrid posts={posts} />
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: app/(authenticated)/profile/edit/page.jsx
================
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { createClient, updateProfile } from '../../../../utils/supabase/client';
import { ProfileImageUpload } from '../../../../components';
import { CheckCircleIcon, XCircleIcon } from '@heroicons/react/24/outline';
import ConfirmModal from '../../../../components/ui/ConfirmModal';

export default function EditProfilePage() {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const supabase = createClient();
  const [profile, setProfile] = useState(null);
  const [formData, setFormData] = useState({
    name: '',
    bio: '',
    username: ''
  });
  const [usernameState, setUsernameState] = useState({
    isChecking: false,
    isValid: false,
    error: null,
    canUpdate: false
  });
  const [showUsernameModal, setShowUsernameModal] = useState(false);
  const [debounceTimeout, setDebounceTimeout] = useState(null);

  useEffect(() => {
    loadProfile();
    return () => {
      if (debounceTimeout) {
        clearTimeout(debounceTimeout);
      }
    };
  }, []);

  const loadProfile = async () => {
    try {
      setIsLoading(true);
      setError(null);

      const { data: { user }, error: userError } = await supabase.auth.getUser();
      
      if (userError) throw userError;

      if (!user) {
        router.push('/login');
        return;
      }

      // Get the user's profile and check if they can update username
      const { data: profileData, error: profileError } = await supabase
        .from('profiles')
        .select('*, can_update_username:username_updated_at')
        .eq('id', user.id)
        .single();

      if (profileError) throw profileError;

      setProfile(profileData);
      setFormData({
        name: profileData.name || '',
        bio: profileData.bio || '',
        username: profileData.username || ''
      });
      setUsernameState(prev => ({
        ...prev,
        isValid: true,
        canUpdate: !profileData.username_updated_at || 
          // If there's an error parsing the date, assume they can't update
          new Date(profileData.username_updated_at).getTime() + (30 * 24 * 60 * 60 * 1000) < Date.now()
      }));
    } catch (err) {
      console.error('Error loading profile:', err);
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  const validateUsername = (value) => {
    const formatRegex = /^[a-zA-Z][a-zA-Z0-9_]{2,19}$/;
    return formatRegex.test(value);
  };

  const checkUsernameAvailability = async (value) => {
    if (!validateUsername(value)) {
      setUsernameState({
        isChecking: false,
        isValid: false,
        error: 'Username must be 3-20 characters, start with a letter, and contain only letters, numbers, or underscores'
      });
      return;
    }

    // If checking current username, it's valid
    if (value === profile?.username) {
      setUsernameState({
        isChecking: false,
        isValid: true,
        error: null
      });
      return;
    }

    setUsernameState(prev => ({ ...prev, isChecking: true, error: null }));

    try {
      const { data, error } = await supabase
        .from('profiles')
        .select('username')
        .eq('username', value)
        .single();

      if (error && error.code === 'PGRST116') {
        // No match found - username is available
        setUsernameState({
          isChecking: false,
          isValid: true,
          error: null
        });
      } else {
        setUsernameState({
          isChecking: false,
          isValid: false,
          error: 'Username already taken'
        });
      }
    } catch (err) {
      setUsernameState({
        isChecking: false,
        isValid: false,
        error: 'Error checking username availability'
      });
    }
  };

  const handleUsernameChange = (e) => {
    const { value } = e.target;
    setFormData(prev => ({ ...prev, username: value }));
    
    if (debounceTimeout) {
      clearTimeout(debounceTimeout);
    }

    const newTimeout = setTimeout(() => {
      checkUsernameAvailability(value);
    }, 500);

    setDebounceTimeout(newTimeout);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      setIsLoading(true);
      setError(null);

      if (!profile?.id) {
        throw new Error('No profile found');
      }

      // Check if username is being changed
      if (formData.username !== profile.username) {
        // Verify server-side that the user can update their username
        const { data: canUpdate, error: checkError } = await supabase
          .rpc('check_username_update_eligibility', { user_id: profile.id });

        if (checkError) throw checkError;

        if (!canUpdate) {
          setError('You cannot update your username yet. Please wait 30 days between username changes.');
          setIsLoading(false);
          return;
        }

        if (usernameState.isValid) {
          setShowUsernameModal(true);
          setIsLoading(false);
          return;
        }
      }

      await updateProfile(profile.id, {
        username: formData.username,
        full_name: formData.name,
        bio: formData.bio,
      });

      setShowUsernameModal(false);
      router.push(`/profile/${profile.id}`);
    } catch (err) {
      console.error('Error updating profile:', err);
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  if (isLoading) {
    return <div className="flex justify-center items-center min-h-screen">
      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
    </div>;
  }

  return (
    <div className="max-w-2xl mx-auto p-4 sm:p-6 lg:p-8">
      <h1 className="text-2xl font-bold mb-6">Edit Profile</h1>
      
      <form onSubmit={handleSubmit} className="space-y-6">
        <ProfileImageUpload user={profile} />

        <div>
          <label htmlFor="username" className="block text-sm font-medium text-gray-700">
            Username
          </label>
          <div className="relative mt-1">
            <input
              type="text"
              id="username"
              name="username"
              value={formData.username}
              onChange={handleUsernameChange}
              className="block w-full rounded-md border-gray-300 px-4 py-2 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
              required
            />
            <div className="absolute inset-y-0 right-0 flex items-center pr-3">
              {usernameState.isChecking ? (
                <div className="h-5 w-5 animate-spin rounded-full border-b-2 border-gray-400" />
              ) : formData.username && (
                usernameState.isValid ? (
                  <CheckCircleIcon className="h-5 w-5 text-green-500" />
                ) : (
                  <XCircleIcon className="h-5 w-5 text-red-500" />
                )
              )}
            </div>
          </div>
          {usernameState.error && (
            <p className="mt-2 text-sm text-red-600">{usernameState.error}</p>
          )}
        </div>

        <div>
          <label htmlFor="name" className="block text-sm font-medium text-gray-700">
            Display Name
          </label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name}
            onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
            className="mt-1 block w-full rounded-md border-gray-300 px-4 py-2 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
          />
        </div>

        <div>
          <label htmlFor="bio" className="block text-sm font-medium text-gray-700">
            Bio
          </label>
          <textarea
            id="bio"
            name="bio"
            rows={4}
            value={formData.bio}
            onChange={(e) => setFormData(prev => ({ ...prev, bio: e.target.value }))}
            className="mt-1 block w-full rounded-md border-gray-300 px-4 py-2 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
          />
        </div>

        {error && (
          <div className="rounded-md bg-red-50 p-4">
            <p className="text-sm text-red-700">{error}</p>
          </div>
        )}

        <div className="flex justify-end gap-4">
          <button
            type="button"
            onClick={() => router.back()}
            className="inline-flex justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={isLoading || (formData.username !== profile?.username && (!usernameState.isValid || !usernameState.canUpdate))}
            className="inline-flex justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-50"
          >
            Save Changes
          </button>
        </div>
      </form>

      <ConfirmModal
        isOpen={showUsernameModal}
        onClose={() => setShowUsernameModal(false)}
        onConfirm={handleSubmit}
        title="Confirm Username Change"
        message="Are you sure you want to change your username? You can only change it once every 30 days. This will update how others see you across the platform."
      />
    </div>
  );
}

================
File: app/(authenticated)/profile/page.jsx
================
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { createClient } from '../../../utils/supabase/client';
import { 
  ProfileHeader, 
  ProfileStats,
  GoalsList, 
  FriendsList, 
  ProductivityDashboard,
  PostGrid,
  ComingSoonToast 
} from '../../../components';

export default function ProfilePage() {
  const [user, setUser] = useState(null);
  const [profile, setProfile] = useState(null);
  const [posts, setPosts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showToast, setShowToast] = useState(false);
  const [toastMessage, setToastMessage] = useState('');
  const router = useRouter();
  const supabase = createClient();

  useEffect(() => {
    async function loadProfile() {
      try {
        const { data: { user: userData }, error: userError } = await supabase.auth.getUser();
        
        if (!userData || userError) {
          router.push('/');
          return;
        }

        setUser(userData);

        // Load profile data
        const { data: profileData, error: profileError } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', userData.id)
          .single();

        if (profileError) throw profileError;
        setProfile(profileData);

        // Load posts
        const { data: postsData, error: postsError } = await supabase
          .from('posts')
          .select('*')
          .eq('user_id', userData.id)
          .order('created_at', { ascending: false });

        if (postsError) throw postsError;
        setPosts(postsData || []);

      } catch (error) {
        console.error('Error loading profile:', error);
      } finally {
        setLoading(false);
      }
    }

    loadProfile();

    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
      if (event === 'SIGNED_OUT' || !session) {
        router.push('/');
      }
    });

    return () => {
      subscription?.unsubscribe();
    };
  }, [router]);

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="w-8 h-8 border-2 border-primary-500 border-t-transparent rounded-full animate-spin" />
      </div>
    );
  }

  if (!user || !profile) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-surface-900 mb-2">Profile Not Found</h1>
          <p className="text-surface-500">Please sign in to view your profile.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto px-4 py-8 space-y-8">
      {/* Profile Header Section */}
      <div className="bg-white rounded-xl shadow-soft p-6">
        <ProfileHeader profile={profile} isOwnProfile={true} />
        <div className="mt-6 border-t pt-6">
          <ProfileStats userId={profile.id} />
        </div>
      </div>

      {/* Three Column Layout */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Productivity Dashboard */}
        <div className="bg-white rounded-xl shadow-soft p-6">
          <h2 className="text-xl font-bold text-surface-900 mb-4">Productivity</h2>
          <ProductivityDashboard userId={profile.id} />
        </div>

        {/* Goals List */}
        <div className="bg-white rounded-xl shadow-soft p-6">
          <h2 className="text-xl font-bold text-surface-900 mb-4">Goals</h2>
          <GoalsList userId={profile.id} isOwnProfile={true} />
        </div>

        {/* Friends List */}
        <div className="bg-white rounded-xl shadow-soft p-6">
          <h2 className="text-xl font-bold text-surface-900 mb-4">Friends</h2>
          <FriendsList userId={profile.id} />
        </div>
      </div>

      {/* Posts Grid */}
      <div className="bg-white rounded-xl shadow-soft p-6">
        <h2 className="text-xl font-bold text-surface-900 mb-4">Posts</h2>
        <PostGrid posts={posts} />
      </div>

      <ComingSoonToast
        message={toastMessage}
        isVisible={showToast}
        onClose={() => setShowToast(false)}
      />
    </div>
  );
}

================
File: app/(authenticated)/search/page.jsx
================
'use client';

import { useEffect, useState } from 'react';
import { useSearchParams } from 'next/navigation';
import { createClient } from '../../../utils/supabase/client';
import Link from 'next/link';
import { ProfileCard } from '../../../components';
import { Loader2 } from 'lucide-react';

export default function SearchResults() {
  const [results, setResults] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const searchParams = useSearchParams();
  const supabase = createClient();
  
  const searchQuery = searchParams.get('q') || '';

  useEffect(() => {
    async function performSearch() {
      if (!searchQuery) {
        setResults([]);
        setIsLoading(false);
        return;
      }

      setIsLoading(true);
      setError(null);

      try {
        // Search for users with partial username or name matches
        const { data, error } = await supabase
          .from('profiles')
          .select('id, username, name, profile_image')
          .or(`username.ilike.%${searchQuery}%, name.ilike.%${searchQuery}%`)
          .limit(20);

        if (error) throw error;

        setResults(data || []);
      } catch (err) {
        console.error('Search error:', err);
        setError('Failed to perform search. Please try again.');
      } finally {
        setIsLoading(false);
      }
    }

    performSearch();
  }, [searchQuery]);

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-32">
        <Loader2 className="h-8 w-8 animate-spin text-gray-500" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 border-l-4 border-red-400 p-4">
        <p className="text-red-700">{error}</p>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold text-gray-900 mb-6">
        {searchQuery ? `Search results for "${searchQuery}"` : 'Search Results'}
      </h1>

      {results.length === 0 ? (
        <div className="text-center py-12 bg-white rounded-lg shadow">
          <p className="text-gray-500">
            {searchQuery
              ? `No users found matching "${searchQuery}"`
              : 'Enter a search term to find users'}
          </p>
        </div>
      ) : (
        <div className="bg-white rounded-lg shadow divide-y">
          {results.map((user) => (
            <Link key={user.id} href={`/profile/${user.id}`}>
              <ProfileCard
                profile={user}
                size="small"
                className="hover:bg-gray-50"
              />
            </Link>
          ))}
        </div>
      )}
    </div>
  );
}

================
File: app/(authenticated)/layout.jsx
================
'use client';

import { Navbar } from '../../components';
import { createClient } from '../../utils/supabase/client';
import { useEffect, useState } from 'react';

export default function AuthenticatedLayout({ children }) {
  const [user, setUser] = useState(null);
  const supabase = createClient();

  useEffect(() => {
    async function getUser() {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      setUser(user);
    }
    getUser();
  }, []);

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col">
      <Navbar user={user} />
      <main className="flex-1 pt-16">
        {children}
      </main>
    </div>
  );
}

================
File: app/(authenticated)/README.md
================
# Authenticated Layout System

This document explains how the authenticated layout system works in our Next.js application, particularly focusing on user authentication state management and React hooks.

## Overview

The `layout.jsx` file serves as a wrapper for all authenticated routes in our application. It provides:
1. Consistent layout structure across authenticated pages
2. User authentication state management
3. Global navigation through the Navbar component

## Code Breakdown

```javascript
'use client';

import { Navbar } from '../../components';
import { createClient } from '../../utils/supabase/client';
import { useEffect, useState } from 'react';

export default function AuthenticatedLayout({ children }) {
  const [user, setUser] = useState(null);
  const supabase = createClient();

  useEffect(() => {
    async function getUser() {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      setUser(user);
    }
    getUser();
  }, []);

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col">
      <Navbar user={user} />
      <main className="flex-1 pt-16">
        {children}
      </main>
    </div>
  );
}
```

### Key Concepts

#### 1. 'use client' Directive
```javascript
'use client';
```
- This directive tells Next.js that this is a client component
- Required because we're using React hooks (useState, useEffect)
- Allows us to use browser APIs and maintain client-side state

#### 2. React Hooks

##### useState Hook
```javascript
const [user, setUser] = useState(null);
```
- Creates a state variable `user` and its setter function `setUser`
- Initial value is `null`
- When `setUser` is called, React will re-render components that depend on this state
- Used to maintain the user's authentication state across the application

##### useEffect Hook
```javascript
useEffect(() => {
  async function getUser() {
    const { data: { user } } = await supabase.auth.getUser();
    setUser(user);
  }
  getUser();
}, []);
```
- Runs side effects in functional components
- The empty dependency array `[]` means this effect runs once when the component mounts
- Perfect for initial data fetching and setup
- Async operation wrapped in a function because useEffect callback cannot be directly async

#### 3. Supabase Integration

```javascript
import { createClient } from '../../utils/supabase/client';
const supabase = createClient();
```
- Creates a Supabase client instance
- Client is configured in `utils/supabase/client.js`
- Uses environment variables for configuration
- Provides methods for authentication and database operations

#### 4. Component Structure

```javascript
return (
  <div className="min-h-screen bg-gray-100 flex flex-col">
    <Navbar user={user} />
    <main className="flex-1 pt-16">
      {children}
    </main>
  </div>
);
```
- Flexbox layout (`flex flex-col`) for proper content distribution
- Passes user data to Navbar component
- `children` prop contains the page content
- `pt-16` accounts for fixed navbar height

## Data Flow

1. **Initial Load**:
   - Component mounts
   - useEffect triggers
   - Supabase client fetches user data
   - State updates with user information

2. **State Updates**:
   - `user` state changes trigger re-renders
   - Child components receive updated user data
   - UI updates to reflect authentication state

3. **Props Passing**:
   - User data flows down through props
   - Navbar receives user information
   - Child routes can access layout context

## Best Practices

1. **Authentication State**:
   - Keep auth state at a high level in the component tree
   - Pass down through props rather than fetching in multiple places
   - Use context if deep prop passing becomes unwieldy

2. **Performance**:
   - Empty dependency array prevents unnecessary re-fetches
   - State updates are batched by React
   - Client-side caching through Supabase

3. **Error Handling**:
   - Add error handling for auth state fetching
   - Implement loading states
   - Handle edge cases (no user, expired session)

4. **Security**:
   - Keep sensitive operations server-side
   - Validate user sessions
   - Implement proper route protection

## Common Patterns

1. **Protected Routes**:
   - Wrap authenticated content in this layout
   - Redirect unauthenticated users
   - Handle loading states

2. **State Management**:
   - Use local state for UI concerns
   - Leverage Supabase for data persistence
   - Consider context for global state

3. **Component Communication**:
   - Props for parent-child communication
   - Events for child-parent communication
   - Context for global state access

## Troubleshooting

1. **User Undefined Issues**:
   - Check initial state handling
   - Verify Supabase configuration
   - Ensure proper error handling

2. **Layout Problems**:
   - Verify CSS classes
   - Check flex layout structure
   - Ensure proper nesting

3. **Authentication Errors**:
   - Verify Supabase credentials
   - Check token expiration
   - Monitor network requests

## Additional Resources

- [Next.js Documentation](https://nextjs.org/docs)
- [React Hooks Documentation](https://reactjs.org/docs/hooks-intro.html)
- [Supabase Authentication](https://supabase.com/docs/guides/auth)
- [React Context API](https://reactjs.org/docs/context.html)

================
File: app/api/auth/callback/route.js
================
import { cookies } from 'next/headers';
import { NextResponse } from 'next/server';
import { createClient } from '../../../../utils/supabase/server';
import { authLogger as logger } from '../../../../utils/logger';

export async function GET(request) {
  const requestUrl = new URL(request.url);
  const code = requestUrl.searchParams.get('code');
  const error = requestUrl.searchParams.get('error');
  const error_description = requestUrl.searchParams.get('error_description');

  // Log all relevant information about the request
  logger.info('Auth callback initiated', {
    hasCode: !!code,
    hasError: !!error,
    url: request.url,
    origin: requestUrl.origin,
    pathname: requestUrl.pathname,
    searchParams: Object.fromEntries(requestUrl.searchParams),
    headers: Object.fromEntries(request.headers),
    env: process.env.NODE_ENV,
    isDev: process.env.NODE_ENV === 'development',
    VERCEL_URL: process.env.VERCEL_URL
  });

  // Handle auth errors
  if (error) {
    logger.error('Auth error from provider', { error, error_description });
    return NextResponse.redirect(new URL(`/?error=${encodeURIComponent(error)}`, requestUrl.origin));
  }

  if (!code) {
    logger.error('No code provided');
    return NextResponse.redirect(new URL('/?error=no_code', requestUrl.origin));
  }

  const cookieStore = cookies();
  const response = NextResponse.redirect(new URL('/feed', requestUrl.origin));

  try {
    // Create Supabase client with cookie store and response
    const supabase = await createClient(cookieStore, response);

    logger.info('Exchanging code for session...');
    const { data: { session }, error: authError } = await supabase.auth.exchangeCodeForSession(code);
    
    if (authError) {
      logger.error('Auth exchange failed', { 
        error: authError,
        code: authError.code,
        message: authError.message
      });
      return NextResponse.redirect(new URL('/?error=auth', requestUrl.origin));
    }

    if (!session) {
      logger.error('No session established');
      return NextResponse.redirect(new URL('/?error=no-session', requestUrl.origin));
    }

    logger.info('Session established', {
      userId: session.user.id,
      email: session.user.email
    });

    // Check if profile exists
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('id, onboarded')
      .eq('id', session.user.id)
      .single();

    // Create profile if it doesn't exist
    if (!profile && !profileError) {
      const { error: createError } = await supabase
        .from('profiles')
        .insert([
          {
            id: session.user.id,
            email: session.user.email,
            username: session.user.email.split('@')[0],
            name: session.user.user_metadata?.full_name || session.user.email.split('@')[0],
            onboarded: false
          }
        ]);

      if (createError) {
        logger.error('Error creating profile', { error: createError });
        return NextResponse.redirect(new URL('/onboarding', requestUrl.origin));
      }

      logger.info('Created new profile', { userId: session.user.id });
      return NextResponse.redirect(new URL('/onboarding', requestUrl.origin));
    }

    // Redirect to onboarding if not completed
    if (profile && !profile.onboarded) {
      logger.info('User not onboarded, redirecting', { userId: session.user.id });
      return NextResponse.redirect(new URL('/onboarding', requestUrl.origin));
    }

    logger.info('Auth flow complete, redirecting to feed', { userId: session.user.id });
    return response;

  } catch (error) {
    logger.error('Unexpected error in auth callback', { error });
    return NextResponse.redirect(new URL('/?error=unexpected', requestUrl.origin));
  }
}

================
File: app/api/auth/signup/route.js
================
import { createServerClient } from '@supabase/ssr';
import { cookies } from 'next/headers';
import { NextResponse } from 'next/server';

export async function POST(request) {
  try {
    const cookieStore = cookies();
    const supabase = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
      {
        cookies: {
          get(name) {
            return cookieStore.get(name)?.value;
          },
          set(name, value, options) {
            cookieStore.set({ name, value, ...options });
          },
          remove(name, options) {
            cookieStore.delete({ name, ...options });
          },
        },
      }
    );

    const { email, password, name } = await request.json();

    // Create the user in Supabase Auth with metadata
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: {
          full_name: name || email.split('@')[0], // This will trigger our database trigger
        },
      },
    });

    if (authError) {
      return NextResponse.json(
        { error: authError.message },
        { status: 400 }
      );
    }

    // The profile will be created automatically by our database trigger
    return NextResponse.json(
      { message: 'User created successfully' },
      { status: 201 }
    );
  } catch (error) {
    console.error('Signup error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

================
File: app/api/follows/route.js
================
import { createClient } from '../../../utils/supabase/server';
import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';

// POST: Send a follow request
export async function POST(request) {
  const cookieStore = cookies();
  const supabase = await createClient(cookieStore);
  
  // Check authentication
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  try {
    const { targetUserId } = await request.json();
    if (!targetUserId) {
      return NextResponse.json({ error: 'Target user ID is required' }, { status: 400 });
    }
    if (targetUserId === user.id) {
      return NextResponse.json({ error: 'Cannot follow yourself' }, { status: 400 });
    }
    
    // Verify target user exists
    const { data: targetProfile, error: targetError } = await supabase
      .from('profiles')
      .select('id')
      .eq('id', targetUserId)
      .maybeSingle();
    if (targetError || !targetProfile) {
      return NextResponse.json({ error: 'Target user not found' }, { status: 404 });
    }
    
    // Check if a pending follow request already exists
    const { data: existingRequest } = await supabase
      .from('follow_requests')
      .select('*')
      .eq('from_user', user.id)
      .eq('to_user', targetUserId)
      .eq('status', 'pending')
      .maybeSingle();
    if (existingRequest) {
      return NextResponse.json({ error: 'Follow request already pending' }, { status: 400 });
    }
    
    // Check if already following
    const { data: existingFollow } = await supabase
      .from('follows')
      .select('*')
      .eq('follower_id', user.id)
      .eq('following_id', targetUserId)
      .maybeSingle();
    if (existingFollow) {
      return NextResponse.json({ error: 'Already following this user' }, { status: 400 });
    }
    
    // Insert new follow request
    const payload = { from_user: user.id, to_user: targetUserId };
    const { data: newRequest, error: insertError } = await supabase
      .from('follow_requests')
      .insert([payload])
      .select()
      .maybeSingle();
    if (insertError) {
      return NextResponse.json({ error: insertError.message }, { status: 500 });
    }
    
    // Optionally, create a notification for the target user
    const notificationPayload = {
      user_id: targetUserId,
      type: 'follow_request',
      trigger_user_id: user.id,
      reference_id: newRequest.id,
      message: 'You have a new follow request.',
      is_read: false
    };
    const { error: notificationError } = await supabase
      .from('notifications')
      .insert([notificationPayload]);
    if (notificationError) {
      console.error('Notification insertion error:', notificationError);
      // Notification failures do not stop the follow request.
    }
    
    return NextResponse.json({ message: 'Follow request sent successfully', data: newRequest });
  } catch (error) {
    console.error('Error in POST /api/follows:', error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}

// DELETE: Cancel a pending follow request or remove an established follow relationship
export async function DELETE(request) {
  const cookieStore = cookies();
  const supabase = await createClient(cookieStore);
  
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  try {
    const { targetUserId } = await request.json();
    if (!targetUserId) {
      return NextResponse.json({ error: 'Target user ID is required' }, { status: 400 });
    }
    
    // Delete any pending follow request sent by the user
    const { error: deleteRequestError } = await supabase
      .from('follow_requests')
      .delete()
      .match({ from_user: user.id, to_user: targetUserId, status: 'pending' });
    if (deleteRequestError) {
      return NextResponse.json({ error: deleteRequestError.message }, { status: 500 });
    }
    
    // Also delete an established follow relationship if it exists
    const { error: deleteFollowError } = await supabase
      .from('follows')
      .delete()
      .match({ follower_id: user.id, following_id: targetUserId });
    if (deleteFollowError) {
      return NextResponse.json({ error: deleteFollowError.message }, { status: 500 });
    }
    
    return NextResponse.json({ message: 'Successfully unfollowed or cancelled follow request' });
  } catch (error) {
    console.error('Error in DELETE /api/follows:', error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}

// PATCH: Process (accept or reject) a pending follow request
export async function PATCH(request) {
  const cookieStore = cookies();
  const supabase = await createClient(cookieStore);

  const { data: { user }, error: authError } = await supabase.auth.getUser();
  if (!user) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  try {
    const { requestId, action } = await request.json();
    if (!requestId || !action) {
      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });
    }

    // Verify the follow request exists and is for this user
    const { data: followRequest, error: requestError } = await supabase
      .from('follow_requests')
      .select('*')
      .eq('id', requestId)
      .eq('to_user', user.id)
      .eq('status', 'pending')
      .single();

    if (requestError || !followRequest) {
      console.error('Error fetching follow request:', requestError);
      return NextResponse.json({ error: 'Follow request not found' }, { status: 404 });
    }

    const now = new Date().toISOString();

    if (action === 'accept') {
      // Start a transaction to update both tables
      const { data: newFollow, error: followError } = await supabase
        .from('follows')
        .insert([
          {
            follower_id: followRequest.from_user,
            following_id: followRequest.to_user
          }
        ]);

      if (followError) {
        console.error('Error creating follow relationship:', followError);
        return NextResponse.json({ error: 'Failed to create follow relationship' }, { status: 500 });
      }

      // Update the request status
      const { error: updateError } = await supabase
        .from('follow_requests')
        .update({ 
          status: 'accepted',
          last_processed_at: now
        })
        .eq('id', requestId);

      if (updateError) {
        console.error('Error updating follow request:', updateError);
        return NextResponse.json({ error: 'Failed to update follow request' }, { status: 500 });
      }

      return NextResponse.json({ status: 'accepted' });
    } else if (action === 'reject') {
      // Update the request status to declined
      const { error: updateError } = await supabase
        .from('follow_requests')
        .update({ 
          status: 'declined',
          last_processed_at: now
        })
        .eq('id', requestId);

      if (updateError) {
        console.error('Error updating follow request:', updateError);
        return NextResponse.json({ error: 'Failed to update follow request' }, { status: 500 });
      }

      return NextResponse.json({ status: 'declined' });
    } else {
      return NextResponse.json({ error: 'Invalid action' }, { status: 400 });
    }
  } catch (error) {
    console.error('Error processing follow request action:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

// GET: Retrieve follow data
export async function GET(request) {
  const cookieStore = cookies();
  const supabase = await createClient(cookieStore);
  
  console.log('🔑 Checking authentication...');
  const { data: { user }, error: authError } = await supabase.auth.getUser();
  if (!user) {
    console.error('❌ Authentication failed:', authError);
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  console.log('✅ Authenticated as user:', user.id);
  
  try {
    const url = new URL(request.url);
    const type = url.searchParams.get('type') || 'status';
    const targetUserId = url.searchParams.get('targetUserId');
    
    console.log('📝 Request params:', { type, targetUserId });

    // Status check for a specific target user
    if (type === 'status' && targetUserId) {
      console.log('🔍 Checking follow status:', { userId: user.id, targetUserId });
      
      try {
        // Check for pending request
        const { data: requests, error: pendingError } = await supabase
          .from('follow_requests')
          .select('*')
          .eq('from_user', user.id)
          .eq('to_user', targetUserId)
          .eq('status', 'pending');

        if (pendingError) {
          console.error('❌ Error checking pending request:', pendingError);
          throw pendingError;
        }

        console.log('📋 Pending requests:', requests);
        if (requests && requests.length > 0) {
          console.log('✅ Found pending request');
          return NextResponse.json({ status: 'pending' });
        }

        // If no pending request, check for existing follow
        const { data: follows, error: followError } = await supabase
          .from('follows')
          .select('*')
          .eq('follower_id', user.id)
          .eq('following_id', targetUserId);

        if (followError) {
          console.error('❌ Error checking follow status:', followError);
          throw followError;
        }

        console.log('📋 Follow relationships:', follows);
        const status = (follows && follows.length > 0) ? 'following' : 'not_following';
        console.log('✅ Final status:', status);

        return NextResponse.json({ status });
      } catch (error) {
        console.error('❌ Error in status check:', error);
        return NextResponse.json({ error: error.message }, { status: 500 });
      }
    }
    
    // Retrieve pending follow requests (both received and sent)
    if (type === 'requests') {
      const { data: received, error: receivedError } = await supabase
        .from('follow_requests')
        .select(`
          *,
          from_user:profiles!follow_requests_from_fk(id, username, name, profile_image)
        `)
        .eq('to_user', user.id)
        .eq('status', 'pending');
      if (receivedError) {
        return NextResponse.json({ error: receivedError.message }, { status: 500 });
      }
      
      const { data: sent, error: sentError } = await supabase
        .from('follow_requests')
        .select(`
          *,
          to_user:profiles!follow_requests_to_fk(id, username, name, profile_image)
        `)
        .eq('from_user', user.id)
        .eq('status', 'pending');
      if (sentError) {
        return NextResponse.json({ error: sentError.message }, { status: 500 });
      }
      
      return NextResponse.json({ received: received || [], sent: sent || [] });
    }
    
    // Retrieve established follow relationships (followers and following)
    if (type === 'relationships') {
      const { data: followers, error: followersError } = await supabase
        .from('follows')
        .select(`
          *,
          follower:profiles!follows_follower_id_fkey(id, username, name, profile_image)
        `)
        .eq('following_id', user.id);
      if (followersError) {
        return NextResponse.json({ error: followersError.message }, { status: 500 });
      }
      
      const { data: following, error: followingError } = await supabase
        .from('follows')
        .select(`
          *,
          following:profiles!follows_following_id_fkey(id, username, name, profile_image)
        `)
        .eq('follower_id', user.id);
      if (followingError) {
        return NextResponse.json({ error: followingError.message }, { status: 500 });
      }
      
      return NextResponse.json({ followers: followers || [], following: following || [] });
    }
    
    return NextResponse.json({ error: 'Invalid type parameter' }, { status: 400 });
  } catch (error) {
    console.error('Error in GET /api/follows:', error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}

================
File: app/api/notifications/[id]/route.js
================
import { createClient } from '../../../../utils/supabase/server';
import { NextResponse } from 'next/server';

export async function PATCH(request, { params }) {
  try {
    const supabase = await createClient();
    const { id } = params;
    const { is_read } = await request.json();

    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { data, error } = await supabase
      .from('notifications')
      .update({ is_read })
      .eq('id', id)
      .eq('user_id', user.id)
      .select()
      .single();

    if (error) throw error;

    return NextResponse.json(data);
  } catch (error) {
    console.error('Error updating notification:', error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}

================
File: app/api/notifications/mark-read/route.js
================
import { createClient } from '../../../../utils/supabase/server';
import { NextResponse } from 'next/server';

export async function POST(request) {
  try {
    const supabase = await createClient();
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { notificationId, markAll = false } = await request.json();
    if (!markAll && !notificationId) {
      return NextResponse.json({ error: 'Notification ID is required' }, { status: 400 });
    }    

    if (markAll) {
      const { data, error: updateError } = await supabase
        .from('notifications')
        .update({ is_read: true })
        .eq('user_id', user.id)
        .select();

      if (updateError) {
        console.error('Update error:', updateError);
        return NextResponse.json({ error: updateError.message }, { status: 500 });
      }

      return NextResponse.json({ 
        message: 'All notifications marked as read',
        data
      });
    } else {
      // First, verify the notification exists
      const { data: notification, error: fetchError } = await supabase
        .from('notifications')
        .select()
        .eq('id', notificationId)
        .eq('user_id', user.id)
        .single();

      if (fetchError) {
        console.error('Fetch error:', fetchError);
        return NextResponse.json({ 
          error: 'Notification not found',
          details: fetchError.message 
        }, { status: 404 });
      }

      if (!notification) {
        return NextResponse.json({ 
          error: 'Notification not found' 
        }, { status: 404 });
      }

      // Then update it
      const { data: updatedNotification, error: updateError } = await supabase
        .from('notifications')
        .update({ is_read: true })
        .eq('id', notificationId)
        .eq('user_id', user.id)
        .select();

      if (updateError) {
        console.error('Update error:', updateError);
        return NextResponse.json({ error: updateError.message }, { status: 500 });
      }

      return NextResponse.json({ 
        message: 'Notification marked as read',
        data: updatedNotification[0]
      });
    }
  } catch (error) {
    console.error('Error marking notification(s) as read:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to mark notification(s) as read' },
      { status: 500 }
    );
  }
}

================
File: app/api/posts/[id]/route.js
================
import { createClient } from '../../../../utils/supabase/server';
import { NextResponse } from 'next/server';

export async function DELETE(
  request,
  { params }
) {
  const supabase = await createClient();
  const { data: { user }, error: authError } = await supabase.auth.getUser();

  if (authError || !user) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const postId = params.id;

  try {
    // First verify the post belongs to the user
    const { data: post, error: fetchError } = await supabase
      .from('posts')
      .select('user_id')
      .eq('id', postId)
      .single();

    if (fetchError) {
      return NextResponse.json(
        { error: 'Post not found' },
        { status: 404 }
      );
    }

    if (post.user_id !== user.id) {
      return NextResponse.json(
        { error: 'Unauthorized to delete this post' },
        { status: 403 }
      );
    }

    // Delete the post (likes will be cascade deleted due to FK constraint)
    const { error: deleteError } = await supabase
      .from('posts')
      .delete()
      .eq('id', postId);

    if (deleteError) throw deleteError;

    return NextResponse.json({ success: true }, { status: 200 });
  } catch (error) {
    return NextResponse.json(
      { error: error.message },
      { status: 400 }
    );
  }
}

================
File: app/api/posts/route.js
================
// app/api/posts/route.js
import { createClient } from '../../../utils/supabase/server';
import { NextResponse } from 'next/server';

export async function POST(request) {
  const supabase = await createClient();
  const { data: { user }, error: authError } = await supabase.auth.getUser();

  if (authError || !user) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  try {
    const { content } = await request.json();
    if (!content) {
      return NextResponse.json({ error: 'Content is required' }, { status: 400 });
    }

    const { data, error } = await supabase
      .from('posts')
      .insert([{ user_id: user.id, content }])
      .single();

    if (error) throw error;

    return NextResponse.json(data, { status: 201 });
  } catch (error) {
    return NextResponse.json({ error: error.message }, { status: 400 });
  }
}

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: #ffffff;
    --foreground: #171717;
  }

  @media (prefers-color-scheme: dark) {
    :root {
      --background: #171717;
      --foreground: #ffffff;
    }
  }
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

================
File: app/layout.jsx
================
import './globals.css';
import { Inter } from 'next/font/google';
import { redirect } from 'next/navigation';
import { createServerClient } from '@supabase/ssr'
import { cookies, headers } from 'next/headers'

const inter = Inter({ subsets: ['latin'] });

export const metadata = {
  title: 'Win of the Day',
  description: 'Share your daily wins and stay connected with friends.',
};

export default async function RootLayout({ children }) {
  const cookieStore = cookies()
  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
    {
      cookies: {
        get(name) {
          return cookieStore.get(name)?.value
        },
      },
    }
  )
  
  const { data: { user } } = await supabase.auth.getUser()
  
  // Check if user needs to complete onboarding
  if (user) {
    const { data: profile } = await supabase
      .from('profiles')
      .select('username')
      .eq('id', user.id)
      .single()

    const headersList = headers()
    const pathname = headersList.get('x-pathname') || '/'
    
    if (!profile?.username && pathname !== '/onboarding') {
      redirect('/onboarding')
    }
  }

  return (
    <html lang="en">
      <body className={`min-h-screen bg-gray-100 ${inter.className}`}>
        {children}
      </body>
    </html>
  );
}

================
File: app/page.jsx
================
import { createClient } from '../utils/supabase/server';
import { redirect } from 'next/navigation';
import dynamic from 'next/dynamic';

// Lazy-load client components
const SignInForm = dynamic(() => import('../components/common/SignInForm'), {
  ssr: false,
  loading: () => (
    <div className="w-full h-32 flex items-center justify-center">
      <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-indigo-600"></div>
    </div>
  ),
});

const GoogleSignInButton = dynamic(() => import('../components/common/GoogleSignInButton'), {
  ssr: false,
});

export default async function Home() {
  const supabase = await createClient();
  const {
    data: { user },
    error,
  } = await supabase.auth.getUser();

  // If the user is already logged in, send them to the feed.
  if (user && !error) {
    redirect('/feed');
  }

  return (
    <div className="min-h-screen flex flex-col lg:flex-row">
      {/* =============================================
          Value Prop Section (Mobile-first display)
      ============================================== */}
      <div className="w-full lg:w-1/2 bg-gradient-to-br from-indigo-900 via-indigo-800 to-purple-900 text-white p-12 flex flex-col justify-center relative overflow-hidden">
        {/* Subtle grid pattern & gradient overlay */}
        <div className="absolute inset-0 bg-[url('/grid.svg')] opacity-10"></div>
        <div className="absolute inset-0 bg-gradient-to-t from-indigo-900/40 to-transparent"></div>
        
        <div className="relative max-w-xl mx-auto">
          {/* Simplified, more scannable content */}
          <h1 className="text-5xl font-bold mb-4 bg-gradient-to-r from-white to-indigo-200 text-transparent bg-clip-text">
            Win of the Day
          </h1>
          <p className="text-xl mb-6 text-indigo-100 leading-relaxed">
            A daily space for reflection and connection. Share your wins, get inspired, and strengthen friendships without the constant catch-up.
            <span className="block mt-6 text-lg italic text-indigo-200 border-l-4 border-indigo-400 pl-4">
                "Friendship isn't about catching up, it's about never falling behind in the first place."
              </span>
          </p>
          
          <ul className="list-none space-y-6">
            <li className="flex items-start space-x-4 group">
              <div className="bg-gradient-to-br from-indigo-500/20 to-purple-500/20 p-4 rounded-2xl backdrop-blur-sm border border-white/10 transform transition-all duration-300 group-hover:scale-105 group-hover:shadow-lg group-hover:shadow-indigo-500/20">
                <svg
                  className="w-7 h-7 text-indigo-300"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414
                      a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
                  />
                </svg>
              </div>
              <div>
                <h3 className="font-semibold text-xl text-white mb-1">Daily Reflections</h3>
                <p className="text-indigo-200 text-lg leading-relaxed">
                  Share your wins and experiences each day.
                </p>
              </div>
            </li>

            <li className="flex items-start space-x-4 group">
              <div className="bg-gradient-to-br from-indigo-500/20 to-purple-500/20 p-4 rounded-2xl backdrop-blur-sm border border-white/10 transform transition-all duration-300 group-hover:scale-105 group-hover:shadow-lg group-hover:shadow-indigo-500/20">
                <svg
                  className="w-7 h-7 text-indigo-300"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2
                      c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7
                      20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0
                      019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6
                      3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0
                      11-4 0 2 2 0 014 0z"
                  />
                </svg>
              </div>
              <div>
                <h3 className="font-semibold text-xl text-white mb-1">Connect with Others</h3>
                <p className="text-indigo-200 text-lg leading-relaxed">
                  Stay in sync with friends without endless catch-up calls.
                </p>
              </div>
            </li>

            <li className="flex items-start space-x-4 group">
              <div className="bg-gradient-to-br from-indigo-500/20 to-purple-500/20 p-4 rounded-2xl backdrop-blur-sm border border-white/10 transform transition-all duration-300 group-hover:scale-105 group-hover:shadow-lg group-hover:shadow-indigo-500/20">
                <svg
                  className="w-7 h-7 text-indigo-300"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M9.663 17h4.673M12 3v1m6.364
                      1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828
                      9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014
                      18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"
                  />
                </svg>
              </div>
              <div>
                <h3 className="font-semibold text-xl text-white mb-1">Find Inspiration</h3>
                <p className="text-indigo-200 text-lg leading-relaxed">
                  Discover new perspectives to keep you motivated.
                </p>
              </div>
            </li>
          </ul>
        </div>
      </div>

      {/* =============================================
          Sign In Section (Stacks below on mobile)
      ============================================== */}
      <div className="w-full lg:w-1/2 flex items-center justify-center p-8 sm:p-12 bg-gradient-to-br from-slate-50 to-white">
        {/* Slightly framed container to draw attention */}
        <div className="w-full max-w-md space-y-8 bg-white/80 p-8 rounded-xl shadow-xl border border-gray-100">
          <div>
            <h2 className="mt-2 text-center text-3xl font-extrabold tracking-tight text-gray-900">
              Get Started
            </h2>
            <p className="mt-2 text-center text-sm text-gray-600">
              Share your wins and stay connected.
            </p>
          </div>

          <div>
            <GoogleSignInButton />
          </div>

          <div className="relative my-4">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-300"></div>
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-2 bg-white text-gray-500">Or sign in with your email</span>
            </div>
          </div>

          <SignInForm />
        </div>
      </div>
    </div>
  );
}

================
File: components/common/GoogleSignInButton.jsx
================
'use client';

import { createClient } from '../../utils/supabase/client';
import { getSiteUrl } from '../../utils/config';

export default function GoogleSignInButton() {
  const supabase = createClient();

  const handleGoogleSignIn = async () => {
    const siteUrl = getSiteUrl();
    
    console.log('Starting Google sign-in flow...', {
      env: process.env.NODE_ENV,
      isDev: process.env.NODE_ENV === 'development',
      siteUrl,
      redirectTo: `${siteUrl}/api/auth/callback`
    });

    await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: `${siteUrl}/api/auth/callback`,
        queryParams: {
          access_type: 'offline',
          prompt: 'consent'
        }
      }
    });
  };

  return (
    <button
      onClick={handleGoogleSignIn}
      className="w-full flex items-center justify-center gap-3 bg-white px-4 py-3 border border-gray-300 rounded-xl shadow-sm text-sm font-medium text-gray-600 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all duration-200 group"
    >
      <svg className="h-5 w-5" viewBox="0 0 24 24">
        <path
          d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
          fill="#4285F4"
        />
        <path
          d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
          fill="#34A853"
        />
        <path
          d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
          fill="#FBBC05"
        />
        <path
          d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
          fill="#EA4335"
        />
      </svg>
      <span className="text-gray-600 font-medium group-hover:text-gray-900 transition-colors duration-200">
        Sign in with Google
      </span>
    </button>
  );
}

================
File: components/common/Navbar.jsx
================
'use client';

import { Fragment } from 'react';
import Link from 'next/link';
import { Menu, Transition } from '@headlessui/react';
import { Menu as MenuIcon } from 'lucide-react';
import { SearchBar } from '../../components';
import { usePathname } from 'next/navigation';
import { createClient } from '../../utils/supabase/client';
import { useRouter } from 'next/navigation';
import NotificationBell from '../notifications/NotificationBell';

export default function Navbar({ user }) {
  const pathname = usePathname();
  const router = useRouter();
  const supabase = createClient();

  const handleSignOut = async () => {
    try {
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      router.push('/');
    } catch (error) {
      console.error('Error signing out:', error);
    }
  };

  const getMobileMenuItems = () => {
    // Base items that are always available
    const items = [
      { href: '/feed', label: 'Feed' },
      { href: `/profile/${user?.id}`, label: 'Profile' },
      { onClick: handleSignOut, label: 'Sign Out' },
    ];

    // Filter out the current page from the menu
    return items.filter(item => {
      if (item.href) {
        // For profile pages, check if we're on any profile page
        if (item.href.startsWith('/profile') && pathname.startsWith('/profile')) {
          return false;
        }
        // For other pages, exact match
        return item.href !== pathname;
      }
      return true; // Keep non-link items (like Sign Out)
    });
  };

  const NavLink = ({ href, children, className = '' }) => (
    <Link
      href={href}
      className={`px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
        (pathname === href || (href.startsWith('/profile') && pathname.startsWith('/profile')))
          ? 'text-white bg-white/10'
          : 'text-indigo-100 hover:text-white hover:bg-white/10'
      } ${className}`}
    >
      {children}
    </Link>
  );

  return (
    <nav className="fixed top-0 left-0 right-0 bg-gradient-to-r from-indigo-900 via-indigo-800 to-purple-900 z-50">
      {/* Subtle grid pattern overlay */}
      <div className="absolute inset-0 bg-[url('/grid.svg')] opacity-10"></div>
      <div className="absolute inset-0 bg-gradient-to-b from-black/10 to-transparent"></div>

      {/* Main navbar content */}
      <div className="relative px-4 h-16">
        <div className="flex items-center justify-between h-full">
          {/* Logo */}
          <Link href="/" className="flex items-center space-x-2">
            <span className="text-2xl font-bold bg-gradient-to-r from-white to-indigo-200 bg-clip-text text-transparent hover:to-white transition-all duration-300">
              DW
            </span>
          </Link>

          {/* Search Bar - Now in the middle */}
          <div className="flex-1 max-w-md mx-4">
            <SearchBar />
          </div>

          {/* Right section with notification bell and mobile menu */}
          <div className="flex items-center space-x-2">
            {/* Notification Bell - Always visible */}
            <NotificationBell />

            {/* Mobile Menu - Only show on mobile/small screens */}
            <div className="block sm:hidden">
              <Menu as="div" className="relative">
                <Menu.Button className="p-2 rounded-lg text-gray-200 hover:bg-white/10 focus:outline-none focus:ring-2 focus:ring-white/20">
                  <MenuIcon className="w-6 h-6" />
                </Menu.Button>

                <Transition
                  as={Fragment}
                  enter="transition ease-out duration-100"
                  enterFrom="transform opacity-0 scale-95"
                  enterTo="transform opacity-100 scale-100"
                  leave="transition ease-in duration-75"
                  leaveFrom="transform opacity-100 scale-100"
                  leaveTo="transform opacity-0 scale-95"
                >
                  <Menu.Items className="fixed right-4 mt-2 w-56 origin-top-right divide-y divide-gray-100 rounded-xl bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none z-[9999]">
                    <div className="py-1">
                      {getMobileMenuItems().map((item, index) => (
                        <Menu.Item key={index}>
                          {({ active }) => (
                            item.href ? (
                              <Link
                                href={item.href}
                                className={`${
                                  active ? 'bg-gray-100' : ''
                                } flex items-center px-4 py-2 text-sm text-gray-700 space-x-2`}
                              >
                                <span>{item.label}</span>
                              </Link>
                            ) : (
                              <button
                                onClick={item.onClick}
                                className={`${
                                  active ? 'bg-gray-100' : ''
                                } flex items-center w-full text-left px-4 py-2 text-sm text-gray-700`}
                              >
                                <span>{item.label}</span>
                              </button>
                            )
                          )}
                        </Menu.Item>
                      ))}
                    </div>
                  </Menu.Items>
                </Transition>
              </Menu>
            </div>

            {/* Desktop Navigation - Show on larger screens */}
            <div className="hidden sm:flex items-center space-x-4">
              <NavLink href="/feed">Feed</NavLink>
              <NavLink href={`/profile/${user?.id}`}>Profile</NavLink>
              <button
                onClick={handleSignOut}
                className="px-4 py-2 rounded-lg text-sm font-medium text-white hover:bg-white/10 transition-colors"
              >
                Sign Out
              </button>
            </div>
          </div>
        </div>
      </div>
    </nav>
  );
}

================
File: components/common/ProfileImageUpload.jsx
================
'use client';

import { useState } from 'react';
import { createClient } from '../../utils/supabase/client';
import { Upload, X } from 'lucide-react';
import Image from 'next/image';

const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB

export default function ProfileImageUpload({ currentImage, onUploadComplete, displayName = 'U' }) {
  const [uploading, setUploading] = useState(false);
  const [preview, setPreview] = useState(null);
  const [error, setError] = useState(null);
  const supabase = createClient();

  const uploadImage = async (file) => {
    try {
      setUploading(true);
      setError(null);

      if (!file) {
        throw new Error('No file selected');
      }

      // Validate file size
      if (file.size > MAX_FILE_SIZE) {
        throw new Error('File size must be less than 5MB');
      }

      // Validate file type
      if (!file.type.startsWith('image/')) {
        throw new Error('File must be an image');
      }

      // Create a unique file name
      const fileExt = file.type.split('/')[1];
      const fileName = `${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;

      // First check if the bucket exists and is accessible
      const { data: bucketData, error: bucketError } = await supabase
        .storage
        .getBucket('profile-images');

      if (bucketError) {
        console.error('Bucket error:', bucketError);
        throw new Error('Storage system is not properly configured');
      }

      // Upload the file
      const { error: uploadError } = await supabase.storage
        .from('profile-images')
        .upload(fileName, file, {
          cacheControl: '3600',
          upsert: false,
          contentType: file.type
        });

      if (uploadError) {
        console.error('Upload error:', uploadError);
        throw uploadError;
      }

      // Get the public URL
      const { data: urlData } = supabase.storage
        .from('profile-images')
        .getPublicUrl(fileName);

      if (!urlData?.publicUrl) {
        throw new Error('Failed to get public URL for uploaded image');
      }

      // Update profile with new image URL
      onUploadComplete(urlData.publicUrl);
      
    } catch (error) {
      console.error('Error uploading image:', error);
      setError(error.message || 'Error uploading image');
      setPreview(null);
    } finally {
      setUploading(false);
    }
  };

  const handleFileChange = async (event) => {
    const file = event.target.files?.[0];
    if (!file) return;

    // Create preview
    const objectUrl = URL.createObjectURL(file);
    setPreview(objectUrl);

    // Upload the file
    await uploadImage(file);

    // Clean up preview URL
    return () => URL.revokeObjectURL(objectUrl);
  };

  return (
    <div className="relative h-full w-full">
      <input
        type="file"
        accept="image/*"
        onChange={handleFileChange}
        disabled={uploading}
        className="absolute inset-0 w-full h-full opacity-0 cursor-pointer z-10"
        aria-label="Upload profile image"
      />
      
      {currentImage || preview ? (
        <div className="relative w-full h-full">
          <Image
            src={preview || currentImage}
            alt="Profile"
            fill
            className="rounded-xl border-4 border-white shadow-lg object-cover"
          />
          {uploading && (
            <div className="absolute inset-0 bg-black bg-opacity-50 rounded-xl flex items-center justify-center">
              <div className="w-8 h-8 border-4 border-white border-t-transparent rounded-full animate-spin"></div>
            </div>
          )}
          <div className="absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-40 transition-all duration-200 rounded-xl flex items-center justify-center">
            <Upload className="w-8 h-8 text-white opacity-0 hover:opacity-100 transition-all duration-200" />
          </div>
        </div>
      ) : (
        <div className="w-full h-full bg-indigo-100 rounded-xl border-4 border-white shadow-lg flex items-center justify-center">
          <span className="text-4xl font-bold text-indigo-600">
            {displayName[0].toUpperCase()}
          </span>
        </div>
      )}
      
      {error && (
        <div className="absolute -bottom-8 left-0 right-0 text-center text-sm bg-red-50 text-red-500 p-2 rounded-lg">
          {error}
        </div>
      )}
    </div>
  );
}

================
File: components/common/SearchBar.jsx
================
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Search } from 'lucide-react';

export default function SearchBar() {
  const [searchTerm, setSearchTerm] = useState('');
  const [isSearching, setIsSearching] = useState(false);
  const router = useRouter();

  const handleSearch = async (e) => {
    e.preventDefault();
    if (!searchTerm.trim()) return;

    setIsSearching(true);
    try {
      // Redirect to search results page with the search term
      const encodedSearchTerm = encodeURIComponent(searchTerm.trim());
      router.push(`/search?q=${encodedSearchTerm}`);
      setSearchTerm('');
    } catch (error) {
      console.error('Search error:', error);
    } finally {
      setIsSearching(false);
    }
  };

  return (
    <form onSubmit={handleSearch} className="relative w-full">
      <div className="relative">
        <input
          type="text"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          placeholder="Find friends by name or username!"
          className="w-full h-10 pl-10 pr-4 text-sm bg-white/10 border border-white/20 rounded-lg placeholder-gray-400 text-white focus:outline-none focus:ring-2 focus:ring-white/20 focus:border-transparent"
        />
        <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" />
        {isSearching && (
          <div className="absolute inset-y-0 right-0 pr-3 flex items-center">
            <div className="h-4 w-4 border-2 border-white/20 border-t-transparent rounded-full animate-spin"></div>
          </div>
        )}
      </div>
    </form>
  );
}

================
File: components/common/SignInForm.jsx
================
'use client';

import { useState } from 'react';
import { createBrowserClient } from '@supabase/ssr';
import { useRouter } from 'next/navigation';

export default function SignInForm() {
  const [isSignUp, setIsSignUp] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [name, setName] = useState('');
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  
  const router = useRouter();
  const supabase = createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
    {
      cookies: {
        get(name) {
          const cookie = document.cookie
            .split('; ')
            .find((row) => row.startsWith(`${name}=`));
          return cookie ? cookie.split('=')[1] : null;
        },
        set(name, value, options) {
          let cookie = `${name}=${value}`;
          if (options.maxAge) {
            cookie += `; Max-Age=${options.maxAge}`;
          }
          if (options.path) {
            cookie += `; Path=${options.path}`;
          }
          document.cookie = cookie;
        },
        remove(name, options) {
          document.cookie = `${name}=; Max-Age=0; Path=${options?.path || '/'}`;
        },
      },
    }
  );

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);
    setLoading(true);

    try {
      if (isSignUp) {
        // Server-side signup is handled by the API route.
        const response = await fetch('/api/auth/signup', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            email,
            password,
            name: name || email.split('@')[0],
          }),
        });

        const data = await response.json();
        
        if (!response.ok) throw new Error(data.error);
      }

      // Sign in the user
      const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (signInError) throw signInError;

      if (signInData?.session) {
        // Force a hard reload to ensure cookies are properly set
        window.location.href = '/feed';
      } else {
        throw new Error('No session returned after sign in');
      }
    } catch (err) {
      setError(err.message);
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {error && (
        <div className="bg-red-50 border-l-4 border-red-400 p-4">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                <path
                  fillRule="evenodd"
                  d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                  clipRule="evenodd"
                />
              </svg>
            </div>
            <div className="ml-3">
              <p className="text-sm text-red-700">{error}</p>
            </div>
          </div>
        </div>
      )}

      {isSignUp && (
        <div>
          <label htmlFor="name" className="block text-sm font-medium text-gray-700">
            Name
          </label>
          <div className="mt-1">
            <input
              id="name"
              name="name"
              type="text"
              autoComplete="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            />
          </div>
        </div>
      )}

      <div>
        <label htmlFor="email" className="block text-sm font-medium text-gray-700">
          Email address
        </label>
        <div className="mt-1">
          <input
            id="email"
            name="email"
            type="email"
            autoComplete="email"
            required
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          />
        </div>
      </div>

      <div>
        <label htmlFor="password" className="block text-sm font-medium text-gray-700">
          Password
        </label>
        <div className="mt-1">
          <input
            id="password"
            name="password"
            type="password"
            autoComplete={isSignUp ? 'new-password' : 'current-password'}
            required
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          />
        </div>
      </div>

      <div>
        <button
          type="submit"
          disabled={loading}
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50"
        >
          {loading ? 'Loading...' : isSignUp ? 'Sign Up' : 'Sign In'}
        </button>
      </div>

      <div className="text-sm text-center">
        <button
          type="button"
          onClick={() => setIsSignUp(!isSignUp)}
          className="font-medium text-indigo-600 hover:text-indigo-500"
        >
          {isSignUp ? 'Already have an account? Sign in' : "Don't have an account? Sign up"}
        </button>
      </div>
    </form>
  );
}

================
File: components/feed/WinFeed.jsx
================
'use client';

import { useState, useEffect } from 'react';
import { createClient } from '../../utils/supabase/client';
import { Post } from '../../components';
import { Loader2 } from 'lucide-react';

export default function WinFeed({ currentUser }) {
  const [posts, setPosts] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const supabase = createClient();

  useEffect(() => {
    if (currentUser) {
      loadPosts();
      // Set up real-time subscription for posts and likes
      const postsSubscription = supabase
        .channel('posts-changes')
        .on(
          'postgres_changes',
          {
            event: '*',
            schema: 'public',
            table: 'posts',
          },
          (payload) => {
            console.log('Posts change received:', payload);
            loadPosts();
          }
        )
        .subscribe();

      const likesSubscription = supabase
        .channel('likes-changes')
        .on(
          'postgres_changes',
          {
            event: '*',
            schema: 'public',
            table: 'likes',
          },
          (payload) => {
            console.log('Likes change received:', payload);
            loadPosts();
          }
        )
        .subscribe();

      return () => {
        postsSubscription.unsubscribe();
        likesSubscription.unsubscribe();
      };
    }
  }, [currentUser]);

  const loadPosts = async () => {
    try {
      setIsLoading(true);
      setError(null);

      // First get the list of users the current user follows
      const { data: followData, error: followError } = await supabase
        .from('follows')
        .select('following_id')
        .eq('follower_id', currentUser.id);

      if (followError) throw followError;

      // Get array of followed user IDs plus the current user's ID
      const userIds = [currentUser.id, ...(followData?.map(f => f.following_id) || [])];

      // Get posts with profile, category, and likes count
      const { data: postsData, error: postsError } = await supabase
        .from('posts')
        .select(`
          *,
          category:categories!posts_category_id_fkey (
            id,
            name,
            color,
            icon
          ),
          likes:likes(count)
        `)
        .in('user_id', userIds)
        .order('created_at', { ascending: false });

      if (postsError) throw postsError;

      // Get profiles for the posts
      const { data: profilesData, error: profilesError } = await supabase
        .from('profiles')
        .select('id, name, profile_image')
        .in('id', userIds);

      if (profilesError) throw profilesError;

      // Create a map of profiles for quick lookup
      const profilesMap = new Map(profilesData.map(profile => [profile.id, profile]));

      // Transform posts to include profile, category, and likes count
      const postsWithData = postsData.map(post => ({
        ...post,
        profiles: profilesMap.get(post.user_id),
        likes_count: post.likes?.[0]?.count || 0
      }));

      console.log('Posts with data:', postsWithData);
      setPosts(postsWithData);

    } catch (error) {
      console.error('Error loading posts:', error);
      setError(error.message);
    } finally {
      setIsLoading(false);
    }
  };

  const handlePostUpdate = () => {
    loadPosts();
  };

  if (error) {
    return (
      <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="p-6 bg-red-50 rounded-2xl text-red-600 text-center border border-red-100">
          <p className="font-medium">Unable to load your feed</p>
          <p className="text-sm mt-1 text-red-500">{error}</p>
        </div>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex flex-col items-center justify-center min-h-[400px]">
          <div className="relative">
            <Loader2 className="w-8 h-8 animate-spin text-primary-500" />
            <div className="absolute inset-0 animate-ping rounded-full bg-primary-100 opacity-75" style={{ animationDuration: '2s' }}></div>
          </div>
          <p className="text-gray-500 mt-4 font-medium">Loading your feed...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-2xl mx-auto">
      <div className="px-4 sm:px-0">
        {/* Feed Header */}
        <div className="flex items-center justify-between my-4">
          <h1 className="text-xl font-semibold text-gray-900">
            Your Feed
          </h1>
          <div className="flex items-center space-x-2">
            {/* Add any feed controls here if needed */}
          </div>
        </div>

        {/* Posts */}
        {posts.length === 0 ? (
          <div className="bg-white rounded-xl shadow-sm border border-gray-200">
            <div className="text-center py-16">
              <div className="max-w-sm mx-auto px-6">
                <div className="w-16 h-16 mx-auto mb-6 rounded-full bg-primary-50 flex items-center justify-center">
                  <svg className="w-8 h-8 text-primary-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                  </svg>
                </div>
                <h3 className="text-xl font-semibold text-gray-900 mb-2">Share Your First Win!</h3>
                <p className="text-gray-500 mb-6 leading-relaxed">
                  Start by sharing your achievements or follow others to see their wins in your feed.
                </p>
                <button
                  onClick={() => document.querySelector('textarea')?.focus()}
                  className="inline-flex items-center px-4 py-2 rounded-lg bg-primary-500 text-white hover:bg-primary-600 transition-all duration-200 shadow-sm hover:shadow focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                >
                  Share Your Win
                </button>
              </div>
            </div>
          </div>
        ) : (
          <div className="space-y-4">
            {posts.map((post) => (
              <Post
                key={post.id}
                post={post}
                profile={post.profiles}
                currentUser={currentUser}
                onUpdate={handlePostUpdate}
              />
            ))}
          </div>
        )}
      </div>
    </div>
  );
}

================
File: components/notifications/NotificationBell.jsx
================
import { useState, useEffect } from 'react';
import { Bell } from 'lucide-react';
import { createClient } from '../../utils/supabase/client';
import NotificationsDrawer from './NotificationsDrawer';

export default function NotificationBell() {
  const [isOpen, setIsOpen] = useState(false);
  const [unreadCount, setUnreadCount] = useState(0);
  const supabase = createClient();

  const fetchUnreadCount = async () => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;

      const { count, error } = await supabase
        .from('notifications')
        .select('*', { count: 'exact', head: true })
        .eq('user_id', user.id)
        .eq('is_read', false);

      if (error) throw error;
      setUnreadCount(count || 0);
    } catch (error) {
      console.error('Error fetching unread count:', error);
    }
  };

  useEffect(() => {
    let channel;

    const setupSubscription = async () => {
      try {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) return;

        await fetchUnreadCount();

        channel = supabase
          .channel('notifications-count')
          .on(
            'postgres_changes',
            {
              event: '*',
              schema: 'public',
              table: 'notifications',
              filter: `user_id=eq.${user.id}`
            },
            () => {
              fetchUnreadCount();
            }
          )
          .subscribe((status) => {
            console.log('Notification count subscription status:', status);
          });

      } catch (error) {
        console.error('Error setting up notification count subscription:', error);
      }
    };

    setupSubscription();

    return () => {
      if (channel) {
        console.log('Cleaning up notification count subscription');
        supabase.removeChannel(channel);
      }
    };
  }, []);

  return (
    <>
      <button
        onClick={() => setIsOpen(true)}
        className="relative p-2 text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
      >
        <span className="sr-only">View notifications</span>
        <Bell className="h-6 w-6" />
        {unreadCount > 0 && (
          <span className="absolute bottom-1.5 right-1.5 h-2 w-2 rounded-full bg-red-500" />
        )}
      </button>

      <NotificationsDrawer 
        isOpen={isOpen} 
        onClose={() => {
          setIsOpen(false);
          fetchUnreadCount(); // Refresh count when drawer closes
        }} 
      />
    </>
  );
}

================
File: components/notifications/NotificationItem.jsx
================
'use client';

import { useState } from 'react';
import { UserCircle } from 'lucide-react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { formatDistanceToNow } from 'date-fns';

export default function NotificationItem({ notification, onMarkAsRead, onActionComplete }) {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  // Initialize from the new field; if not present, default to 'pending'
  const [followRequestStatus, setFollowRequestStatus] = useState(notification.follow_request_status || 'pending');
  const router = useRouter();

  const handleFollowAction = async (action) => {
    setIsLoading(true);
    setError(null);
    try {
      const response = await fetch('/api/(authenticated)/follows', {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          requestId: notification.reference_id,
          action: action
        })
      });

      if (!response.ok) {
        const errData = await response.json();
        throw new Error(errData.error || `Failed to ${action} follow request`);
      }
      
      // Update the local status based on the action taken.
      const newStatus = action === 'accept' ? 'accepted' : 'rejected';
      setFollowRequestStatus(newStatus);

      if (onActionComplete) {
        onActionComplete();
      }
    } catch (err) {
      console.error(`Error ${action}ing follow request:`, err);
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  const handleMarkAsRead = async (e) => {
    e.stopPropagation();
    if (notification.is_read) return;
    
    try {
      await onMarkAsRead(notification.id);
    } catch (error) {
      console.error('Error marking notification as read:', error);
    }
  };

  const formatTimeAgo = (timestamp) => {
    const now = new Date();
    const date = new Date(timestamp);
    const seconds = Math.floor((now - date) / 1000);
    if (seconds < 60) return 'just now';
    const minutes = Math.floor(seconds / 60);
    if (minutes < 60) return `${minutes}m ago`;
    const hours = Math.floor(minutes / 60);
    if (hours < 24) return `${hours}h ago`;
    const days = Math.floor(hours / 24);
    if (days < 7) return `${days}d ago`;
    return date.toLocaleDateString();
  };

  const getNotificationContent = () => {
    // If this is a follow request notification, use the follow_request_status to decide what to display.
    if (
      notification.type === 'follow_request' ||
      notification.type === 'follow_request_accepted' ||
      notification.type === 'follow_request_rejected'
    ) {
      if (followRequestStatus === 'accepted') {
        return (
          <div className="flex flex-col gap-2">
            <div className="flex items-center gap-2">
              <Link href={`/profile/${notification.trigger_user_id}`} className="font-medium hover:underline">
                {notification.trigger_user?.name || 'A user'}
              </Link>
              <span>is now following you</span>
            </div>
            <div className="text-sm text-green-600">Follow request accepted</div>
          </div>
        );
      }
      if (followRequestStatus === 'rejected') {
        return (
          <div className="flex flex-col gap-2">
            <div className="flex items-center gap-2">
              <Link href={`/profile/${notification.trigger_user_id}`} className="font-medium hover:underline">
                {notification.trigger_user?.name || 'A user'}
              </Link>
              <span>requested to follow you</span>
            </div>
            <div className="text-sm text-red-600">Follow request declined</div>
          </div>
        );
      }
      // If still pending, show the action buttons.
      return (
        <div className="flex flex-col gap-2">
          <div className="flex items-center gap-2">
            <Link href={`/profile/${notification.trigger_user_id}`} className="font-medium hover:underline">
              {notification.trigger_user?.name || 'A user'}
            </Link>
            <span>requested to follow you</span>
          </div>
          <div className="flex gap-2">
            <button
              onClick={() => handleFollowAction('accept')}
              disabled={isLoading}
              className={`px-3 py-1 text-sm rounded-full ${
                isLoading
                  ? 'bg-gray-100 text-gray-500 cursor-not-allowed'
                  : 'bg-blue-600 text-white hover:bg-blue-700'
              }`}
            >
              {isLoading ? 'Processing...' : 'Accept'}
            </button>
            <button
              onClick={() => handleFollowAction('reject')}
              disabled={isLoading}
              className={`px-3 py-1 text-sm rounded-full ${
                isLoading
                  ? 'bg-gray-100 text-gray-500 cursor-not-allowed'
                  : 'bg-red-100 text-red-600 hover:bg-red-200'
              }`}
            >
              {isLoading ? 'Processing...' : 'Decline'}
            </button>
          </div>
          {error && <div className="text-sm text-red-600 mt-1">{error}</div>}
        </div>
      );
    }
    // For other types of notifications, simply display the message.
    return notification.message || 'New notification';
  };

  return (
    <div
      className={`p-4 hover:bg-gray-50 transition-colors duration-200 ${
        !notification.is_read ? 'bg-blue-50/80' : 'bg-white'
      }`}
      onClick={handleMarkAsRead}
      role="button"
      tabIndex={0}
      onKeyDown={(e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          handleMarkAsRead(e);
        }
      }}
    >
      <div className="flex items-start space-x-4">
        <Link href={`/profile/${notification.trigger_user_id}`} className="flex-shrink-0" onClick={(e) => e.stopPropagation()}>
          {notification.trigger_user?.avatar_url ? (
            <img
              src={notification.trigger_user.avatar_url}
              alt={notification.trigger_user.username}
              className="h-10 w-10 rounded-full object-cover"
            />
          ) : (
            <UserCircle className="h-10 w-10 text-gray-400" />
          )}
        </Link>
        <div className="flex-1 min-w-0">
          <p className="text-sm text-gray-900">{getNotificationContent()}</p>
          <p className="text-xs text-gray-500 mt-1">{formatDistanceToNow(new Date(notification.created_at))}</p>
        </div>
        {!notification.is_read && (
          <div className="flex-shrink-0">
            <div className="h-2.5 w-2.5 rounded-full bg-blue-600"></div>
          </div>
        )}
      </div>
    </div>
  );
}

================
File: components/notifications/NotificationList.jsx
================
import { useEffect } from 'react';
import NotificationItem from './NotificationItem';
import useNotifications from '../../hooks/useNotifications';

export default function NotificationList() {
  const {
    notifications,
    loading,
    error,
    markAsRead,
    markAllAsRead,
    refresh
  } = useNotifications();

  useEffect(() => {
    console.log("NotificationList state:", { notifications, loading, error });
  }, [notifications, loading, error]);

  if (error) {
    console.error("Error loading notifications:", error);
    return (
      <div className="p-4 text-center text-red-500">
        Error loading notifications. Please try again.
      </div>
    );
  }

  if (loading) {
    console.log("Notifications are loading...");
    return (
      <div className="p-4">
        <div className="flex flex-col space-y-4">
          {[...Array(3)].map((_, i) => (
            <div key={i} className="animate-pulse flex space-x-4">
              <div className="rounded-full bg-gray-200 h-10 w-10"></div>
              <div className="flex-1 space-y-3 py-1">
                <div className="h-2 bg-gray-200 rounded"></div>
                <div className="space-y-3">
                  <div className="h-2 bg-gray-200 rounded"></div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  if (!notifications || notifications.length === 0) {
    console.log("No notifications found.");
    return (
      <div className="p-8 text-center text-gray-500">
        <p className="text-sm">No notifications yet</p>
      </div>
    );
  }

  const hasUnreadNotifications = notifications.some((n) => !n.is_read);

  console.log("Rendering notifications:", notifications);
  
  return (
    <div className="divide-y divide-gray-200">
      {hasUnreadNotifications && (
        <div className="p-4 bg-gray-50 flex justify-between items-center">
          <span className="text-sm text-gray-600">You have unread notifications</span>
          <button
            onClick={markAllAsRead}
            className="text-sm text-blue-600 hover:text-blue-800 font-medium"
          >
            Mark all as read
          </button>
        </div>
      )}
      {notifications.map((notification) => (
        <NotificationItem
          key={notification.id}
          notification={notification}
          onMarkAsRead={markAsRead}
          onActionComplete={refresh}
        />
      ))}
    </div>
  );
}

================
File: components/notifications/NotificationsDrawer.jsx
================
'use client';

import { Fragment } from 'react';
import { Dialog, Transition } from '@headlessui/react';
import { XMarkIcon } from '@heroicons/react/24/outline';
import useNotifications from '../../hooks/useNotifications';
import NotificationItem from './NotificationItem';

export default function NotificationsDrawer({ isOpen, onClose }) {
  const {
    notifications,
    loading,
    error,
    markAsRead,
    markAllAsRead,
    refresh
  } = useNotifications();

  // Group notifications by type
  const followRequests = notifications?.filter(n => 
    n.type === 'follow_request' && (!n.follow_request_status || n.follow_request_status === 'pending')
  ) || [];
  
  const otherNotifications = notifications?.filter(n => 
    n.type !== 'follow_request' || (n.type === 'follow_request' && n.follow_request_status && n.follow_request_status !== 'pending')
  ) || [];

  const unreadCount = notifications?.filter(n => !n.is_read).length || 0;

  return (
    <Transition.Root show={isOpen} as={Fragment}>
      <Dialog as="div" className="relative z-50" onClose={onClose}>
        <Transition.Child
          as={Fragment}
          enter="ease-in-out duration-500"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in-out duration-500"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" />
        </Transition.Child>

        <div className="fixed inset-0 overflow-hidden">
          <div className="absolute inset-0 overflow-hidden">
            <div className="pointer-events-none fixed inset-y-0 right-0 flex max-w-full pl-10">
              <Transition.Child
                as={Fragment}
                enter="transform transition ease-in-out duration-500"
                enterFrom="translate-x-full"
                enterTo="translate-x-0"
                leave="transform transition ease-in-out duration-500"
                leaveFrom="translate-x-0"
                leaveTo="translate-x-full"
              >
                <Dialog.Panel className="pointer-events-auto relative w-screen max-w-md">
                  <div className="flex h-full flex-col overflow-y-scroll bg-white shadow-xl">
                    <div className="sticky top-0 z-10 bg-white px-4 py-6 sm:px-6">
                      <div className="flex items-center justify-between">
                        <Dialog.Title className="text-base font-semibold leading-6 text-gray-900">
                          Notifications
                        </Dialog.Title>
                        <div className="ml-3 flex h-7 items-center">
                          <button
                            type="button"
                            className="rounded-md bg-white text-gray-400 hover:text-gray-500"
                            onClick={onClose}
                          >
                            <span className="sr-only">Close panel</span>
                            <XMarkIcon className="h-6 w-6" aria-hidden="true" />
                          </button>
                        </div>
                      </div>
                    </div>

                    {error ? (
                      <div className="p-4 text-center text-red-500">
                        Failed to load notifications. Please try again.
                      </div>
                    ) : loading ? (
                      <div className="p-4 space-y-4">
                        {[1, 2, 3].map((n) => (
                          <div key={n} className="animate-pulse flex space-x-4">
                            <div className="rounded-full bg-gray-200 h-10 w-10" />
                            <div className="flex-1 space-y-2 py-1">
                              <div className="h-2 bg-gray-200 rounded" />
                              <div className="h-2 bg-gray-200 rounded w-3/4" />
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : notifications?.length === 0 ? (
                      <div className="p-8 text-center text-gray-500">
                        No notifications yet
                      </div>
                    ) : (
                      <div className="relative">
                        {unreadCount > 0 && (
                          <div className="sticky top-0 bg-gray-50 p-4 flex justify-between items-center border-b border-gray-200">
                            <span className="text-sm text-gray-600">
                              {unreadCount} unread notification{unreadCount !== 1 ? 's' : ''}
                            </span>
                            <button
                              onClick={markAllAsRead}
                              className="text-sm text-blue-600 hover:text-blue-800 font-medium"
                            >
                              Mark all as read
                            </button>
                          </div>
                        )}

                        {followRequests.length > 0 && (
                          <div className="border-b border-gray-200">
                            <h3 className="px-4 py-3 text-sm font-medium text-gray-500 bg-gray-50">
                              Follow Requests
                            </h3>
                            <div className="divide-y divide-gray-200">
                              {followRequests.map((notification) => (
                                <NotificationItem
                                  key={notification.id}
                                  notification={notification}
                                  onMarkAsRead={markAsRead}
                                  onActionComplete={refresh}
                                />
                              ))}
                            </div>
                          </div>
                        )}

                        {otherNotifications.length > 0 && (
                          <div>
                            <h3 className="px-4 py-3 text-sm font-medium text-gray-500 bg-gray-50">
                              Other Notifications
                            </h3>
                            <div className="divide-y divide-gray-200">
                              {otherNotifications.map((notification) => (
                                <NotificationItem
                                  key={notification.id}
                                  notification={notification}
                                  onMarkAsRead={markAsRead}
                                  onActionComplete={refresh}
                                />
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                </Dialog.Panel>
              </Transition.Child>
            </div>
          </div>
        </div>
      </Dialog>
    </Transition.Root>
  );
}

================
File: components/post/EditPostForm.jsx
================
'use client';

import { useState, useEffect } from 'react';
import { createClient } from '../../utils/supabase/client';
import { Loader2 } from 'lucide-react';

export default function EditPostForm({ post, onSave, onCancel }) {
  const [content, setContent] = useState(post.content);
  const [isPrivate, setIsPrivate] = useState(post.is_private);
  const [category, setCategory] = useState(post.category?.id);
  const [categories, setCategories] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const supabase = createClient();

  useEffect(() => {
    loadCategories();
  }, []);

  const loadCategories = async () => {
    try {
      const { data, error } = await supabase
        .from('categories')
        .select('*')
        .order('name');

      if (error) throw error;
      setCategories(data || []);
    } catch (error) {
      console.error('Error loading categories:', error);
      setError('Failed to load categories');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!content.trim()) {
      setError('Post content cannot be empty');
      return;
    }

    try {
      setIsLoading(true);
      setError('');

      const { data, error } = await supabase
        .from('posts')
        .update({
          content: content.trim(),
          is_private: isPrivate,
          category_id: category,
          updated_at: new Date().toISOString()
        })
        .eq('id', post.id)
        .select('*, categories(*)')
        .single();

      if (error) throw error;

      // Get the user's profile
      const { data: profileData } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', post.user_id)
        .single();

      // Combine the post with the profile data
      const updatedPost = {
        ...data,
        profiles: profileData
      };

      onSave(updatedPost);
    } catch (error) {
      console.error('Error updating post:', error);
      setError(error.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {error && (
        <div className="p-3 rounded-lg bg-red-50 border border-red-200 text-red-700 text-sm">
          {error}
        </div>
      )}

      <div>
        <textarea
          value={content}
          onChange={(e) => setContent(e.target.value)}
          placeholder="What's your win of the day?"
          disabled={isLoading}
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent resize-none"
          rows="3"
        />
      </div>

      <div className="flex items-center space-x-4">
        {/* Category dropdown */}
        <select
          value={category || ''}
          onChange={(e) => setCategory(e.target.value || null)}
          disabled={isLoading}
          className="px-3 py-1.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent text-sm"
        >
          <option value="">Select category</option>
          {categories.map((cat) => (
            <option key={cat.id} value={cat.id}>
              {cat.icon} {cat.name}
            </option>
          ))}
        </select>

        {/* Privacy toggle */}
        <label className="flex items-center space-x-2 cursor-pointer">
          <div className="relative">
            <input
              type="checkbox"
              checked={isPrivate}
              onChange={(e) => setIsPrivate(e.target.checked)}
              disabled={isLoading}
              className="sr-only"
            />
            <div className="w-10 h-5 rounded-full transition-colors duration-200 ease-in-out flex items-center px-0.5" 
              style={{ 
                backgroundColor: isPrivate ? 'rgb(37, 99, 235)' : 'rgb(229, 231, 235)'
              }}>
              <div className={`w-4 h-4 rounded-full bg-white shadow transform transition-transform duration-200 ease-in-out ${
                isPrivate ? 'translate-x-5' : 'translate-x-0'
              }`} />
            </div>
          </div>
          <span className="text-sm text-gray-600">Private</span>
        </label>
      </div>

      <div className="flex justify-end space-x-3 pt-4">
        <button
          type="button"
          onClick={onCancel}
          disabled={isLoading}
          className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
        >
          Cancel
        </button>
        <button
          type="submit"
          disabled={isLoading || !content.trim()}
          className="px-4 py-2 text-sm font-medium text-white bg-primary-600 border border-transparent rounded-lg hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
        >
          {isLoading ? (
            <>
              <Loader2 className="w-4 h-4 animate-spin" />
              <span>Saving...</span>
            </>
          ) : (
            <span>Save Changes</span>
          )}
        </button>
      </div>
    </form>
  );
}

================
File: components/post/NewPostForm.jsx
================
'use client';

import { useState, useRef, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { createClient } from '../../utils/supabase/client';
import { Loader2 } from 'lucide-react';
import { Transition } from '@headlessui/react';
import { ComingSoonToast } from '../ui';

export default function NewPostForm({ onPostCreated, onUpdate }) {
  const [content, setContent] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [categories, setCategories] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [showToast, setShowToast] = useState(false);
  const textareaRef = useRef(null);
  const router = useRouter();
  const supabase = createClient();

  const adjustTextareaHeight = () => {
    const textarea = textareaRef.current;
    if (textarea) {
      textarea.style.height = 'auto';
      textarea.style.height = Math.min(textarea.scrollHeight, 300) + 'px';
    }
  };

  useEffect(() => {
    adjustTextareaHeight();
  }, [content]);

  useEffect(() => {
    async function loadCategories() {
      const { data, error } = await supabase
        .from('categories')
        .select('*')
        .order('name');
      
      if (error) {
        console.error('Error loading categories:', error);
        return;
      }

      setCategories(data || []);
      // Set default category to 'Other' if it exists
      const defaultCategory = data?.find(cat => cat.name === 'Other');
      if (defaultCategory) {
        setSelectedCategory(defaultCategory.id);
      }
    }

    loadCategories();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!content.trim()) {
      setError('Please enter your win of the day');
      return;
    }

    setIsSubmitting(true);
    setError('');

    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        setError('You must be logged in to post');
        return;
      }

      const { data: newPost, error: postError } = await supabase
        .from('posts')
        .insert([
          {
            content: content.trim(),
            user_id: user.id,
            category_id: selectedCategory,
          }
        ])
        .select(`
          *,
          category:categories!posts_category_id_fkey (
            id,
            name,
            color,
            icon
          ),
          likes:likes(count)
        `)
        .single();

      if (postError) throw postError;

      // Get the profile data separately
      const { data: profileData, error: profileError } = await supabase
        .from('profiles')
        .select('id, name, profile_image')
        .eq('id', user.id)
        .single();

      if (profileError) throw profileError;

      // Combine the post and profile data
      const postWithData = {
        ...newPost,
        profiles: profileData,
        likes_count: 0
      };
      
      setContent('');
      // Call both callbacks to ensure immediate UI update and proper data refresh
      if (onPostCreated) {
        onPostCreated(postWithData);
      }
      if (onUpdate) {
        onUpdate();
      }
      router.refresh();
    } catch (err) {
      console.error('Error creating post:', err);
      setError(err.message || 'Failed to create post. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const showComingSoon = () => {
    setShowToast(true);
  };

  return (
    <div className="bg-gray-100 pt-4 pb-3">
      <div className="max-w-2xl mx-auto">
        <div className="bg-white rounded-xl shadow-sm">
          <form onSubmit={handleSubmit} className="p-4">
            {error && (
              <div className="mb-4 p-3 rounded-lg bg-red-50 border border-red-200 text-red-700 text-sm">
                {error}
              </div>
            )}
            
            <div className="relative">
              <textarea
                ref={textareaRef}
                value={content}
                onChange={(e) => {
                  setContent(e.target.value);
                  setError('');
                }}
                placeholder="What's your win of the day?"
                disabled={isSubmitting}
                className="w-full min-h-[60px] max-h-[300px] p-4 pb-20 rounded-lg bg-gray-50 placeholder-gray-500 text-gray-900 focus:bg-white focus:ring-2 focus:ring-primary-300 focus:border-transparent transition-all duration-200 ease-in-out resize-none overflow-auto disabled:opacity-50 disabled:cursor-not-allowed border border-gray-200"
              />
              
              {/* Action Bar */}
              <div className="absolute bottom-3 left-3 right-3 flex items-end space-x-3">
                {/* Categories - Fixed 2 rows */}
                <div className="flex-1">
                  {/* First Row */}
                  <div className="grid grid-cols-4 gap-1 mb-1">
                    {categories.slice(0, 4).map((category) => (
                      <button
                        key={category.id}
                        type="button"
                        onClick={() => setSelectedCategory(category.id)}
                        className={`flex items-center justify-center space-x-1 px-1.5 py-0.5 rounded-full text-xs font-medium transition-all duration-200 ${
                          selectedCategory === category.id
                            ? 'ring-2 ring-offset-1'
                            : 'hover:ring-2 hover:ring-offset-1 hover:ring-opacity-50'
                        }`}
                        style={{
                          backgroundColor: selectedCategory === category.id ? category.color : `${category.color}15`,
                          color: selectedCategory === category.id ? 'white' : category.color,
                          ringColor: category.color
                        }}
                      >
                        <span className="text-base leading-none">{category.icon}</span>
                        <span className="truncate">{category.name}</span>
                      </button>
                    ))}
                  </div>
                  {/* Second Row */}
                  <div className="grid grid-cols-4 gap-1">
                    {categories.slice(4, 8).map((category) => (
                      <button
                        key={category.id}
                        type="button"
                        onClick={() => setSelectedCategory(category.id)}
                        className={`flex items-center justify-center space-x-1 px-1.5 py-0.5 rounded-full text-xs font-medium transition-all duration-200 ${
                          selectedCategory === category.id
                            ? 'ring-2 ring-offset-1'
                            : 'hover:ring-2 hover:ring-offset-1 hover:ring-opacity-50'
                        }`}
                        style={{
                          backgroundColor: selectedCategory === category.id ? category.color : `${category.color}15`,
                          color: selectedCategory === category.id ? 'white' : category.color,
                          ringColor: category.color
                        }}
                      >
                        <span className="text-base leading-none">{category.icon}</span>
                        <span className="truncate">{category.name}</span>
                      </button>
                    ))}
                  </div>
                </div>

                {/* Post Button */}
                <button
                  type="submit"
                  disabled={isSubmitting || !content.trim()}
                  className={`
                    px-4 py-2 rounded-lg font-medium text-white whitespace-nowrap
                    transition-all duration-200 ease-in-out flex items-center space-x-2
                    ${isSubmitting || !content.trim() 
                      ? 'bg-gray-200 cursor-not-allowed' 
                      : 'bg-primary-500 hover:bg-primary-600 active:bg-primary-700 shadow-sm hover:shadow'
                    }
                  `}
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="w-4 h-4 animate-spin" />
                      <span>Posting...</span>
                    </>
                  ) : (
                    <span>Post Win</span>
                  )}
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

================
File: components/post/Post.jsx
================
'use client';

import { useState, useEffect } from 'react';
import { createClient } from '../../utils/supabase/client';
import Link from 'next/link';
import Image from 'next/image';
import { useRouter } from 'next/navigation';
import { formatDistanceToNow } from 'date-fns';
import { Pencil, Heart } from 'lucide-react';
import EditPostForm from './EditPostForm';
import ComingSoonToast from '../ui/ComingSoonToast';
import Modal from '../ui/Modal';
import PostMenu from '../ui/PostMenu';
import DeletePostDialog from '../ui/DeletePostDialog';

export default function Post({ post, profile, currentUser, onUpdate }) {
  const [isLiked, setIsLiked] = useState(false);
  const [likesCount, setLikesCount] = useState(post.likes_count || 0);
  const [isLoading, setIsLoading] = useState(false);
  const [showToast, setShowToast] = useState(false);
  const [toastMessage, setToastMessage] = useState('');
  const [showEditModal, setShowEditModal] = useState(false);
  const [likesList, setLikesList] = useState([]);
  const [isLoadingLikes, setIsLoadingLikes] = useState(false);
  const [showTooltip, setShowTooltip] = useState(false);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const router = useRouter();
  const supabase = createClient();

  // Check if the current user already liked the post
  useEffect(() => {
    checkIfLiked();
  }, [post.id, currentUser?.id]);

  const fetchLikes = async () => {
    if (!post.id || isLoadingLikes) return;
    setIsLoadingLikes(true);
    try {
      const { data, error } = await supabase
        .from('likes')
        .select(`
          id,
          user_id,
          profiles (
            id,
            name
          )
        `)
        .eq('post_id', post.id)
        .order('created_at', { ascending: false });
      if (error) throw error;
      setLikesList(data || []);
    } catch (error) {
      console.error('Error fetching likes:', error);
    } finally {
      setIsLoadingLikes(false);
    }
  };

  const checkIfLiked = async () => {
    if (!currentUser?.id || !post.id) return;
    try {
      const { data, error } = await supabase
        .from('likes')
        .select('id')
        .eq('post_id', post.id)
        .eq('user_id', currentUser.id)
        .maybeSingle();
      if (error) throw error;
      setIsLiked(!!data);
    } catch (error) {
      console.error('Error checking like status:', error);
    }
  };

  const getInitials = (name) => {
    if (!name) return '??';
    return name
      .split(' ')
      .map(part => part[0])
      .join('')
      .toUpperCase()
      .slice(0, 2);
  };

  const handleLike = async () => {
    if (!currentUser?.id) {
      router.push('/login');
      return;
    }
    try {
      setIsLoading(true);
      if (isLiked) {
        // Unlike the post
        const { error } = await supabase
          .from('likes')
          .delete()
          .eq('post_id', post.id)
          .eq('user_id', currentUser.id);
        if (error) throw error;
        setLikesCount(prev => Math.max(0, prev - 1));
      } else {
        // Like the post
        const { error } = await supabase
          .from('likes')
          .insert({
            post_id: post.id,
            user_id: currentUser.id
          });
        if (error) throw error;
        setLikesCount(prev => prev + 1);
      }
      setIsLiked(!isLiked);
      if (onUpdate) onUpdate();
    } catch (error) {
      console.error('Error toggling like:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const showComingSoon = (feature) => {
    setToastMessage(`${feature} coming soon!`);
    setShowToast(true);
  };

  const handleEditSave = (updatedPost) => {
    setShowEditModal(false);
    if (onUpdate) onUpdate();
  };

  const handleDelete = async () => {
    if (!currentUser?.id || !post.id) return;
    
    setIsDeleting(true);
    try {
      const response = await fetch(`/api/posts/${post.id}`, {
        method: 'DELETE',
      });
      
      if (!response.ok) {
        throw new Error('Failed to delete post');
      }
      
      setShowDeleteDialog(false);
      if (onUpdate) onUpdate();
    } catch (error) {
      console.error('Error deleting post:', error);
      setToastMessage('Failed to delete post. Please try again.');
      setShowToast(true);
    } finally {
      setIsDeleting(false);
    }
  };

  // If profile is not provided, use the user_id from the post
  const userId = profile?.id || post.user_id;
  const userName = profile?.name || 'Anonymous';
  const profileImage = profile?.profile_image;
  const timeAgo = formatDistanceToNow(new Date(post.created_at), { addSuffix: true });
  const category = post.category;
  const isOwner = currentUser?.id === post.user_id;
  const wasEdited = post.updated_at && post.updated_at !== post.created_at;

  return (
    <div className="bg-white rounded-xl shadow-sm hover:shadow transition-all duration-200 border border-gray-200">
      {/* Header with user info and category */}
      <div className="flex items-center justify-between p-4">
        <div className="flex items-center space-x-3">
          {/* Avatar */}
          <Link href={`/profile/${userId}`} className="block">
            <div className="relative group">
              <div className="w-10 h-10 rounded-full bg-gradient-to-br from-primary-50 to-primary-100 flex items-center justify-center text-lg font-medium text-primary-600 ring-2 ring-white group-hover:ring-primary-50 transition-all duration-200">
                {userName[0]}
              </div>
              {category && (
                <div 
                  className="absolute -bottom-1 -right-1 w-5 h-5 rounded-full flex items-center justify-center text-xs shadow-sm ring-2 ring-white"
                  style={{
                    backgroundColor: category.color,
                    color: 'white',
                  }}
                >
                  {category.icon}
                </div>
              )}
            </div>
          </Link>
          
          {/* User info and timestamp */}
          <div className="flex flex-col">
            <Link href={`/profile/${userId}`} className="font-semibold text-gray-900 hover:text-primary-500 transition-colors duration-200">
              {userName}
            </Link>
            <span className="text-xs text-gray-500">
              {formatDistanceToNow(new Date(post.created_at), { addSuffix: true })}
              {wasEdited && (
                <span className="ml-1 text-gray-400">(edited)</span>
              )}
            </span>
          </div>
        </div>

        {/* Post menu */}
        {currentUser?.id === userId && (
          <div className="relative">
            <PostMenu 
              onEdit={() => setShowEditModal(true)}
              onDelete={() => setShowDeleteDialog(true)} 
            />
          </div>
        )}
      </div>

      {/* Content */}
      <div className="px-4 pb-3">
        <p className="text-gray-800 whitespace-pre-wrap break-words leading-relaxed">
          {post.content}
        </p>
      </div>

      {/* Actions */}
      <div className="px-4 py-3 border-t border-gray-100">
        <div className="flex items-center space-x-4">
          <div
            className="relative inline-block"
            onMouseEnter={() => {
              fetchLikes();
              setShowTooltip(true);
            }}
            onMouseLeave={() => setShowTooltip(false)}
          >
            <button
              onClick={(e) => {
                e.stopPropagation();
                handleLike();
              }}
              className={`group flex items-center space-x-2 px-3 py-1.5 rounded-full text-sm font-medium transition-all duration-200 ${
                isLiked 
                  ? 'bg-red-50 text-red-500' 
                  : 'text-gray-500 hover:bg-gray-50'
              }`}
            >
              <Heart
                className={`w-4 h-4 ${
                  isLiked 
                    ? 'fill-current' 
                    : 'group-hover:text-red-500'
                } ${isLoading ? 'opacity-50' : ''}`}
              />
              <span className={isLiked ? '' : 'group-hover:text-gray-900'}>
                {likesCount}
              </span>
            </button>
            {showTooltip && likesCount > 0 && (
              <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-1.5 bg-gray-800 text-white text-xs rounded-lg whitespace-nowrap z-10 shadow-xl">
                {isLoadingLikes
                  ? 'Loading...'
                  : likesList.map((like) => like.profiles.name).join(', ')}
                <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 translate-y-1/2 rotate-45 w-2 h-2 bg-gray-800"></div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Delete Dialog */}
      <DeletePostDialog
        isOpen={showDeleteDialog}
        onClose={() => setShowDeleteDialog(false)}
        onConfirm={handleDelete}
        isLoading={isDeleting}
      />

      {/* Edit Modal */}
      <Modal
        isOpen={showEditModal}
        onClose={() => setShowEditModal(false)}
        title="Edit Post"
      >
        <EditPostForm
          post={post}
          onSave={handleEditSave}
          onCancel={() => setShowEditModal(false)}
        />
      </Modal>
    </div>
  );
}

================
File: components/post/PostGrid.jsx
================
'use client';

import { useState } from 'react';
import { Calendar, Grid, List } from 'lucide-react';

export default function PostGrid({ posts }) {
  const [viewMode, setViewMode] = useState('grid');

  const ViewModeButton = ({ mode, icon: Icon, label }) => (
    <button
      onClick={() => setViewMode(mode)}
      className={`p-2 rounded-md ${
        viewMode === mode
          ? 'bg-indigo-100 text-indigo-600'
          : 'text-gray-500 hover:bg-gray-100'
      }`}
      title={label}
    >
      <Icon className="w-5 h-5" />
    </button>
  );

  if (!posts?.length) {
    return (
      <div className="text-center py-12">
        <p className="text-gray-500">No posts yet</p>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <div className="flex justify-end space-x-2 pb-4">
        <ViewModeButton mode="grid" icon={Grid} label="Grid view" />
        <ViewModeButton mode="list" icon={List} label="List view" />
        <ViewModeButton mode="calendar" icon={Calendar} label="Calendar view" />
      </div>

      {viewMode === 'grid' && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {posts.map((post) => (
            <div
              key={post.id}
              className="bg-white rounded-lg shadow-sm overflow-hidden hover:shadow-md transition-shadow duration-200"
            >
              {post.image && (
                <img
                  src={post.image}
                  alt=""
                  className="w-full h-48 object-cover"
                />
              )}
              <div className="p-4">
                <p className="text-gray-900 line-clamp-3">{post.content}</p>
                <div className="mt-2 flex items-center justify-between">
                  <span className="text-sm text-gray-500">
                    {new Date(post.created_at).toLocaleDateString()}
                  </span>
                  {post.category && (
                    <span
                      className="px-2 py-1 rounded-full text-xs font-medium"
                      style={{
                        backgroundColor: post.category.color + '20',
                        color: post.category.color
                      }}
                    >
                      {post.category.name}
                    </span>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {viewMode === 'list' && (
        <div className="space-y-4">
          {posts.map((post) => (
            <div
              key={post.id}
              className="bg-white rounded-lg shadow-sm p-4 hover:shadow-md transition-shadow duration-200"
            >
              <p className="text-gray-900">{post.content}</p>
              <div className="mt-2 flex items-center justify-between">
                <span className="text-sm text-gray-500">
                  {new Date(post.created_at).toLocaleDateString()}
                </span>
                {post.category && (
                  <span
                    className="px-2 py-1 rounded-full text-xs font-medium"
                    style={{
                      backgroundColor: post.category.color + '20',
                      color: post.category.color
                    }}
                  >
                    {post.category.name}
                  </span>
                )}
              </div>
            </div>
          ))}
        </div>
      )}

      {viewMode === 'calendar' && (
        <div className="bg-white rounded-lg shadow-sm p-4">
          <div className="grid grid-cols-7 gap-2">
            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (
              <div key={day} className="text-center text-sm font-medium text-gray-500">
                {day}
              </div>
            ))}
            {generateCalendarDays(posts).map((day, i) => (
              <div
                key={i}
                className={`aspect-square rounded-lg flex items-center justify-center text-sm ${
                  day.posts.length
                    ? 'bg-indigo-100 text-indigo-600 font-medium'
                    : 'text-gray-400'
                }`}
              >
                {day.date.getDate()}
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}

function generateCalendarDays(posts) {
  const today = new Date();
  const start = new Date(today.getFullYear(), today.getMonth(), 1);
  const end = new Date(today.getFullYear(), today.getMonth() + 1, 0);
  
  // Get the day of week for the first day (0-6)
  const firstDay = start.getDay();
  
  // Create array for all days
  const days = [];
  
  // Add empty days for padding
  for (let i = 0; i < firstDay; i++) {
    days.push({ date: new Date(start.getTime() - ((firstDay - i) * 86400000)), posts: [] });
  }
  
  // Add all days in the month
  for (let d = start; d <= end; d.setDate(d.getDate() + 1)) {
    const date = new Date(d);
    const dayPosts = posts.filter(post => {
      const postDate = new Date(post.created_at);
      return postDate.getDate() === date.getDate() &&
             postDate.getMonth() === date.getMonth() &&
             postDate.getFullYear() === date.getFullYear();
    });
    days.push({ date: new Date(date), posts: dayPosts });
  }
  
  return days;
}

================
File: components/profile/FollowButton.jsx
================
'use client';

import { useState, useEffect } from 'react';

export default function FollowButton({ targetUserId, onFollowStateChange }) {
  const [followState, setFollowState] = useState('loading'); // 'loading' | 'following' | 'pending' | 'declined' | 'not_following'
  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState('');
  const [error, setError] = useState(null);

  useEffect(() => {
    async function fetchStatus() {
      console.log('🔍 Fetching follow status for targetUserId:', targetUserId);
      setIsLoading(true);
      setError(null);
      try {
        const response = await fetch(`/api/follows?type=status&targetUserId=${targetUserId}`);
        console.log('📡 Follow status response:', response.status);
        
        if (!response.ok) {
          const errData = await response.json();
          console.error('❌ Follow status error:', errData);
          throw new Error(errData.error || 'Failed to fetch status');
        }
        
        const data = await response.json();
        console.log('✅ Follow status data:', data);
        setFollowState(data.status);
        if (onFollowStateChange) onFollowStateChange(data.status);
      } catch (err) {
        console.error('❌ Error fetching follow status:', err);
        setError(err.message);
        setFollowState('not_following');
      } finally {
        setIsLoading(false);
      }
    }
    
    if (targetUserId) {
      console.log('🎯 FollowButton mounted/updated with targetUserId:', targetUserId);
      fetchStatus();
    }
  }, [targetUserId, onFollowStateChange]);

  const handleToggleFollow = async () => {
    if (followState === 'declined') {
      return; // Do nothing if the request was previously declined
    }

    setIsLoading(true);
    setError(null);
    setMessage('');
    try {
      if (followState === 'following') {
        // Unfollow or cancel pending request
        const response = await fetch('/api/follows', {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ targetUserId })
        });
        if (!response.ok) {
          const errData = await response.json();
          throw new Error(errData.error || 'Failed to unfollow');
        }
        setFollowState('not_following');
        setMessage('Successfully unfollowed');
        if (onFollowStateChange) onFollowStateChange('not_following');
      } else if (followState === 'not_following') {
        // Send follow request
        const response = await fetch('/api/follows', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ targetUserId })
        });
        if (!response.ok) {
          const errData = await response.json();
          if (errData.error === 'Follow request already pending') {
            setFollowState('pending');
            setMessage('Follow request already sent');
            if (onFollowStateChange) onFollowStateChange('pending');
            return;
          }
          throw new Error(errData.error || 'Failed to send follow request');
        }
        setFollowState('pending');
        setMessage('Follow request sent');
        if (onFollowStateChange) onFollowStateChange('pending');
      }
    } catch (err) {
      console.error('Error toggling follow state:', err);
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  const getButtonText = () => {
    switch (followState) {
      case 'loading':
        return 'Loading...';
      case 'following':
        return (
          <span className="group-hover:hidden">Following</span>
        );
      case 'pending':
        return 'Follow Request Sent';
      case 'declined':
        return 'Follow Request Declined';
      default:
        return 'Follow';
    }
  };

  return (
    <div className="relative">
      <button
        onClick={handleToggleFollow}
        disabled={isLoading || followState === 'pending' || followState === 'declined'}
        className={`group px-4 py-2 rounded-full text-sm font-medium transition-colors duration-200 ${
          followState === 'following'
            ? 'bg-gray-200 hover:bg-red-50 hover:text-red-600 hover:before:content-["Unfollow"]'
            : followState === 'pending'
            ? 'bg-gray-100 text-gray-500 cursor-not-allowed'
            : followState === 'declined'
            ? 'bg-red-100 text-red-600 cursor-not-allowed'
            : 'bg-blue-600 text-white hover:bg-blue-700'
        }`}
      >
        {getButtonText()}
      </button>
      {message && (
        <div className="absolute top-full mt-2 text-sm text-green-600">{message}</div>
      )}
      {error && (
        <div className="absolute top-full mt-2 text-sm text-red-600">{error}</div>
      )}
    </div>
  );
}

================
File: components/profile/FriendsList.jsx
================
'use client';

import { useState, useEffect } from 'react';
import { createClient } from '../../utils/supabase/client';
import { useRouter } from 'next/navigation';
import { ProfileCard } from '../ui';

export default function FriendsList({ userId }) {
  const [friends, setFriends] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searching, setSearching] = useState(false);
  const supabase = createClient();
  const router = useRouter();

  // Load the users that the current user is following.
  useEffect(() => {
    if (userId) {
      loadFollowedUsers();
    }
  }, [userId]);

  const loadFollowedUsers = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('follows')
        .select(`
          id,
          follower_id,
          following_id,
          following:profiles!follows_following_id_fkey(
            id, 
            name, 
            username,
            profile_image
          )
        `)
        .eq('follower_id', userId);
      if (error) throw error;

      // Map the follow records to get the followed user's profile.
      const followedUsers = data.map((follow) => ({
        ...follow.following,
        follow_id: follow.id,
      }));
      setFriends(followedUsers || []);
    } catch (error) {
      console.error('Error loading followed users:', error);
    } finally {
      setLoading(false);
    }
  };

  // Debounce the search input to reduce unnecessary queries.
  useEffect(() => {
    const delayDebounceFn = setTimeout(() => {
      if (searchQuery.trim() !== '') {
        searchUsers(searchQuery);
      } else {
        setSearchResults([]);
      }
    }, 300);

    return () => clearTimeout(delayDebounceFn);
  }, [searchQuery]);

  const searchUsers = async (query) => {
    try {
      setSearching(true);
      const { data, error } = await supabase
        .from('profiles')
        .select('id, name, username, profile_image')
        .ilike('name', `%${query}%`)
        .neq('id', userId)
        .limit(5);
      if (error) throw error;

      // Filter out users already followed.
      const followedIds = friends.map((user) => user.id);
      const filteredResults = data.filter((user) => !followedIds.includes(user.id));
      setSearchResults(filteredResults);
    } catch (error) {
      console.error('Error searching users:', error);
    } finally {
      setSearching(false);
    }
  };

  // Inserts a new follow record into the "follows" table.
  const followUser = async (followId) => {
    try {
      const { error } = await supabase.from('follows').insert([
        {
          follower_id: userId,
          following_id: followId,
        },
      ]);
      if (error) throw error;

      // Optionally, refresh the list of followed users.
      loadFollowedUsers();

      // Clear search results and the query.
      setSearchResults([]);
      setSearchQuery('');
    } catch (error) {
      console.error('Error following user:', error);
      alert('Error following user. Please try again.');
    }
  };

  const viewProfile = (profileId) => {
    router.push(`/profile/${profileId}`);
  };

  return (
    <div className="bg-white rounded-xl shadow-soft p-6">
      <h2 className="text-xl font-bold text-surface-900 mb-6">Friends</h2>

      {/* Search Input */}
      <div className="mb-6">
        <div className="relative">
          <input
            type="text"
            placeholder="Search for friends..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full p-3 pl-10 bg-surface-50 border border-surface-200 rounded-lg placeholder-surface-400 focus:ring-2 focus:ring-primary-300 focus:border-primary-300"
          />
          <svg
            className={`absolute left-3 top-3.5 w-4 h-4 ${
              searching ? 'text-primary-500 animate-spin' : 'text-surface-400'
            }`}
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            {searching ? (
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
              />
            ) : (
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
              />
            )}
          </svg>
        </div>

        {searchResults.length > 0 && (
          <div className="mt-2 bg-white border border-surface-200 rounded-lg shadow-lg divide-y">
            {searchResults.map((user) => (
              <ProfileCard
                key={user.id}
                profile={user}
                size="small"
                actionButton={
                  <button
                    onClick={() => followUser(user.id)}
                    className="px-3 py-1.5 bg-primary-500 hover:bg-primary-600 text-white text-sm font-medium rounded-lg transition-colors duration-200"
                  >
                    Follow
                  </button>
                }
              />
            ))}
          </div>
        )}
      </div>

      {/* Followed Users List */}
      <div className="space-y-4">
        {loading ? (
          <div className="flex justify-center py-8">
            <div className="w-8 h-8 border-2 border-primary-500 border-t-transparent rounded-full animate-spin" />
          </div>
        ) : friends.length === 0 ? (
          <p className="text-surface-400 text-center py-8">
            No friends yet. Use the search bar to find friends!
          </p>
        ) : (
          friends.map((friend) => (
            <ProfileCard
              key={friend.follow_id}
              profile={friend}
              actionButton={
                <button
                  onClick={() => viewProfile(friend.id)}
                  className="px-4 py-2 text-surface-500 hover:text-primary-500 transition-colors duration-200"
                >
                  View Profile
                </button>
              }
            />
          ))
        )}
      </div>
    </div>
  );
}

================
File: components/profile/GoalsList.jsx
================
'use client';

import { useState } from 'react';
import ComingSoonToast from '../ui/ComingSoonToast';

export default function GoalsList({ userId, isOwnProfile }) {
  const [showToast, setShowToast] = useState(false);
  const [toastMessage, setToastMessage] = useState('');

  const handleInteraction = (action) => {
    setToastMessage(`Goals feature coming soon! (${action})`);
    setShowToast(true);
  };

  // Placeholder goals for UI demonstration
  const placeholderGoals = [
    {
      id: 1,
      title: 'Example Goal 1',
      description: 'This is a placeholder goal. Goals feature coming soon!',
      target_date: '2024-12-31',
      is_completed: false
    },
    {
      id: 2,
      title: 'Example Goal 2',
      description: 'Another placeholder goal showing the upcoming feature.',
      target_date: '2024-12-31',
      is_completed: true
    }
  ];

  return (
    <div className="space-y-6">
      {isOwnProfile && (
        <button
          onClick={() => handleInteraction('add')}
          className="w-full py-2 px-4 bg-primary-500 text-white rounded-lg hover:bg-primary-600 focus:ring-2 focus:ring-primary-300"
        >
          Add Goal
        </button>
      )}
      
      {placeholderGoals.map(goal => (
        <div
          key={goal.id}
          className="p-4 bg-surface-50 rounded-lg space-y-2"
        >
          <div className="flex items-start justify-between">
            <div className="space-y-1">
              <h3 className="font-medium">{goal.title}</h3>
              <p className="text-sm text-surface-600">{goal.description}</p>
            </div>
            {isOwnProfile && (
              <button
                onClick={() => handleInteraction('toggle')}
                className={`p-2 rounded-full ${
                  goal.is_completed
                    ? 'bg-green-100 text-green-600'
                    : 'bg-surface-100 text-surface-600'
                }`}
              >
                {goal.is_completed ? '✓' : '○'}
              </button>
            )}
          </div>
          <div className="text-sm text-surface-500">
            Target: {new Date(goal.target_date).toLocaleDateString()}
          </div>
        </div>
      ))}
      
      <ComingSoonToast
        message={toastMessage}
        isVisible={showToast}
        onClose={() => setShowToast(false)}
      />
    </div>
  );
}

================
File: components/profile/ProductivityDashboard.jsx
================
'use client';

import { useState, useEffect } from 'react';
import { createClient } from '../../utils/supabase/client';
import { Trophy, Target } from 'lucide-react';

export default function ProductivityDashboard({ userId }) {
  const [stats, setStats] = useState({
    totalWins: 0,
    completedGoals: 0,
    inProgressGoals: 0
  });
  const [loading, setLoading] = useState(true);
  const supabase = createClient();

  useEffect(() => {
    loadStats();
  }, [userId]);

  const loadStats = async () => {
    try {
      setLoading(true);
      
      // Get total wins
      const { data: winsData, error: winsError } = await supabase
        .from('posts')
        .select('count', { count: 'exact' })
        .eq('user_id', userId);

      if (winsError) throw winsError;

      setStats({
        totalWins: winsData[0]?.count || 0,
        completedGoals: 0, // Placeholder for future implementation
        inProgressGoals: 0 // Placeholder for future implementation
      });
    } catch (error) {
      console.error('Error loading productivity stats:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-48">
        <div className="w-8 h-8 border-4 border-indigo-500 border-t-transparent rounded-full animate-spin"></div>
      </div>
    );
  }

  const statItems = [
    {
      label: 'Total Wins',
      value: stats.totalWins,
      icon: Trophy,
      color: 'text-yellow-500'
    },
    {
      label: 'Completed Goals',
      value: stats.completedGoals,
      icon: Target,
      color: 'text-green-500'
    },
    {
      label: 'In Progress',
      value: stats.inProgressGoals,
      icon: Target,
      color: 'text-blue-500'
    }
  ];

  return (
    <div className="grid grid-cols-1 gap-4">
      {statItems.map((item, index) => (
        <div
          key={item.label}
          className="flex items-center p-4 bg-gray-50 rounded-lg"
        >
          <div className={`p-3 rounded-lg ${item.color} bg-opacity-10 mr-4`}>
            <item.icon className={`w-6 h-6 ${item.color}`} />
          </div>
          <div>
            <div className="text-sm font-medium text-gray-500">{item.label}</div>
            <div className="text-lg font-semibold text-gray-900">{item.value}</div>
          </div>
        </div>
      ))}
    </div>
  );
}

================
File: components/profile/ProfileHeader.jsx
================
'use client';

import { useState } from 'react';
import { createClient } from '../../utils/supabase/client';
import { ProfileImageUpload } from '../../components';

export default function ProfileHeader({ profile, isOwnProfile }) {
  const [profileImage, setProfileImage] = useState(profile.profile_image);
  const supabase = createClient();

  const handleImageUpdate = (newImageUrl) => {
    setProfileImage(newImageUrl);
  };

  return (
    <div className="relative bg-white rounded-xl shadow-soft p-6 mb-6">
      <div className="flex flex-col items-center sm:flex-row sm:items-start space-y-4 sm:space-y-0 sm:space-x-6">
        {isOwnProfile ? (
          <ProfileImageUpload
            userId={profile.id}
            currentImageUrl={profileImage}
            onImageUpdate={handleImageUpdate}
          />
        ) : (
          <div className="w-24 h-24 rounded-full overflow-hidden bg-surface-100">
            {profileImage ? (
              <img
                src={profileImage}
                alt={profile.name}
                className="w-full h-full object-cover"
              />
            ) : (
              <div className="w-full h-full flex items-center justify-center text-2xl text-surface-500">
                {profile.name?.charAt(0).toUpperCase() || '?'}
              </div>
            )}
          </div>
        )}

        <div className="flex-1 text-center sm:text-left">
          <div className="flex items-center space-x-2">
            <h1 className="text-2xl font-bold text-surface-900">{profile.name}</h1>
            <p className="text-surface-500">@{profile.username}</p>
          </div>
          
          {isOwnProfile ? (
            <button className="mt-4 px-4 py-2 bg-surface-100 hover:bg-surface-200 text-surface-600 rounded-lg text-sm font-medium transition-colors duration-200">
              Edit Profile
            </button>
          ) : (
            <button className="mt-4 px-4 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded-lg text-sm font-medium transition-colors duration-200">
              Add Friend
            </button>
          )}
        </div>
      </div>
    </div>
  );
}

================
File: components/profile/ProfileStats.jsx
================
'use client';

import { useEffect, useState } from 'react';
import { createClient } from '../../utils/supabase/client';

export default function ProfileStats({ userId }) {
  const [stats, setStats] = useState({
    posts: 0,
    followers: 0,
    following: 0,
    categories: [],
    streaks: []
  });
  const [isLoading, setIsLoading] = useState(true);
  const supabase = createClient();

  useEffect(() => {
    async function fetchStats() {
      try {
        const [
          postsCount,
          followersCount,
          followingCount,
          categoriesData,
          streaksData
        ] = await Promise.all([
          // Get total posts
          supabase
            .from('posts')
            .select('id', { count: 'exact' })
            .eq('user_id', userId),
          
          // Get followers count
          supabase
            .from('follows')
            .select('follower_id', { count: 'exact' })
            .eq('following_id', userId),
          
          // Get following count
          supabase
            .from('follows')
            .select('following_id', { count: 'exact' })
            .eq('follower_id', userId),
          
          // Get categories with post counts
          supabase
            .from('posts')
            .select(`
              category_id,
              categories (
                name,
                color
              )
            `)
            .eq('user_id', userId),

          // Get streaks data
          supabase
            .from('posts')
            .select('created_at')
            .eq('user_id', userId)
            .order('created_at', { ascending: false })
        ]);

        // Process categories data
        const categoryMap = new Map();
        categoriesData.data?.forEach(post => {
          if (post.category_id && post.categories) {
            const count = categoryMap.get(post.category_id)?.count || 0;
            categoryMap.set(post.category_id, {
              name: post.categories.name,
              color: post.categories.color,
              count: count + 1
            });
          }
        });

        // Calculate streaks
        const streaks = calculateStreaks(streaksData.data?.map(p => new Date(p.created_at)) || []);

        setStats({
          posts: postsCount.count || 0,
          followers: followersCount.count || 0,
          following: followingCount.count || 0
          // categories: Array.from(categoryMap.values()),
          // streaks
        });
      } catch (error) {
        console.error('Error fetching stats:', error);
      } finally {
        setIsLoading(false);
      }
    }

    fetchStats();
  }, [userId]);

  function calculateStreaks(dates) {
    if (!dates.length) return [];
    
    const streaks = [];
    let currentStreak = 1;
    let startDate = dates[0];
    
    for (let i = 1; i < dates.length; i++) {
      const dayDiff = Math.floor((dates[i-1] - dates[i]) / (1000 * 60 * 60 * 24));
      
      if (dayDiff === 1) {
        currentStreak++;
      } else {
        streaks.push({
          length: currentStreak,
          startDate: dates[i],
          endDate: startDate
        });
        currentStreak = 1;
        startDate = dates[i];
      }
    }
    
    // Add the last streak
    streaks.push({
      length: currentStreak,
      startDate: dates[dates.length - 1],
      endDate: startDate
    });
    
    return streaks;
  }

  if (isLoading) {
    return (
      <div className="grid grid-cols-3 gap-4 mb-6">
        {[1, 2, 3].map((i) => (
          <div key={i} className="animate-pulse">
            <div className="h-8 bg-gray-200 rounded"></div>
          </div>
        ))}
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-3 gap-4">
        <div className="text-center">
          <div className="text-2xl font-bold text-gray-900">{stats.posts}</div>
          <div className="text-sm text-gray-500">Posts</div>
        </div>
        <div className="text-center">
          <div className="text-2xl font-bold text-gray-900">{stats.followers}</div>
          <div className="text-sm text-gray-500">Followers</div>
        </div>
        <div className="text-center">
          <div className="text-2xl font-bold text-gray-900">{stats.following}</div>
          <div className="text-sm text-gray-500">Following</div>
        </div>
      </div>

      {/* {stats.streaks.length > 0 && (
        <div className="bg-white rounded-lg shadow-sm p-4">
          <h3 className="text-lg font-semibold mb-3">Streaks</h3>
          <div className="space-y-2">
            {stats.streaks.slice(0, 3).map((streak, index) => (
              <div key={index} className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <span className="text-orange-500">🔥</span>
                  <span className="font-medium">{streak.length} days</span>
                </div>
                <span className="text-sm text-gray-500">
                  {new Date(streak.startDate).toLocaleDateString()} - {new Date(streak.endDate).toLocaleDateString()}
                </span>
              </div>
            ))}
          </div>
        </div>
      )} */}

      {/* {stats.categories.length > 0 && (
        <div className="bg-white rounded-lg shadow-sm p-4">
          <h3 className="text-lg font-semibold mb-3">Categories</h3>
          <div className="space-y-2">
            {stats.categories.map((category, index) => (
              <div key={index} className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <div 
                    className="w-3 h-3 rounded-full" 
                    style={{ backgroundColor: category.color }}
                  />
                  <span>{category.name}</span>
                </div>
                <span className="text-sm text-gray-500">{category.count} posts</span>
              </div>
            ))}
          </div>
        </div>
      )} */}
    </div>
  );
}

================
File: components/ui/CategoryChip.jsx
================
export default function CategoryChip({ category, className = '' }) {
  return (
    <span
      className={`inline-flex items-center px-2 py-0.5 rounded-full text-sm font-medium ${className}`}
      style={{
        backgroundColor: `${category.color}15`,
        color: category.color
      }}
      contentEditable={false}
    >
      {category.icon && <span className="mr-1">{category.icon}</span>}
      {category.name}
    </span>
  );
}

================
File: components/ui/ComingSoonToast.jsx
================
'use client';

import { useState, useEffect } from 'react';

export default function ComingSoonToast({ message, isVisible, onClose }) {
  useEffect(() => {
    if (isVisible) {
      const timer = setTimeout(() => {
        onClose();
      }, 2000);

      return () => clearTimeout(timer);
    }
  }, [isVisible, onClose]);

  if (!isVisible) return null;

  return (
    <div className="fixed bottom-4 left-1/2 transform -translate-x-1/2 z-50">
      <div className="bg-gray-800 text-white px-4 py-2 rounded-lg shadow-lg flex items-center space-x-2">
        <span className="text-yellow-400">✨</span>
        <span>{message || 'Coming soon!'}</span>
      </div>
    </div>
  );
}

================
File: components/ui/ConfirmModal.jsx
================
import { Fragment } from 'react'
import { Dialog, Transition } from '@headlessui/react'
import { ExclamationTriangleIcon } from '@heroicons/react/24/outline'

export default function ConfirmModal({ isOpen, onClose, onConfirm, title, message }) {
  return (
    <Transition.Root show={isOpen} as={Fragment}>
      <Dialog as="div" className="relative z-50" onClose={onClose}>
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" />
        </Transition.Child>

        <div className="fixed inset-0 z-10 overflow-y-auto">
          <div className="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
              enterTo="opacity-100 translate-y-0 sm:scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 translate-y-0 sm:scale-100"
              leaveTo="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
            >
              <Dialog.Panel className="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
                <div className="sm:flex sm:items-start">
                  <div className="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-yellow-100 sm:mx-0 sm:h-10 sm:w-10">
                    <ExclamationTriangleIcon className="h-6 w-6 text-yellow-600" aria-hidden="true" />
                  </div>
                  <div className="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                    <Dialog.Title as="h3" className="text-base font-semibold leading-6 text-gray-900">
                      {title}
                    </Dialog.Title>
                    <div className="mt-2">
                      <p className="text-sm text-gray-500">
                        {message}
                      </p>
                    </div>
                  </div>
                </div>
                <div className="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
                  <button
                    type="button"
                    className="inline-flex w-full justify-center rounded-md bg-yellow-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-yellow-500 sm:ml-3 sm:w-auto"
                    onClick={onConfirm}
                  >
                    Confirm
                  </button>
                  <button
                    type="button"
                    className="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto"
                    onClick={onClose}
                  >
                    Cancel
                  </button>
                </div>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </div>
      </Dialog>
    </Transition.Root>
  )
}

================
File: components/ui/DeletePostDialog.tsx
================
'use client';

import { Fragment } from 'react';
import { Dialog, Transition } from '@headlessui/react';

interface DeletePostDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: () => void;
  isLoading: boolean;
}

export default function DeletePostDialog({
  isOpen,
  onClose,
  onConfirm,
  isLoading,
}: DeletePostDialogProps) {
  return (
    <Transition appear show={isOpen} as={Fragment}>
      <Dialog as="div" className="relative z-50" onClose={onClose}>
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black bg-opacity-25" />
        </Transition.Child>

        <div className="fixed inset-0 overflow-y-auto">
          <div className="flex min-h-full items-center justify-center p-4 text-center">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 scale-95"
              enterTo="opacity-100 scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 scale-100"
              leaveTo="opacity-0 scale-95"
            >
              <Dialog.Panel className="w-full max-w-md transform overflow-hidden rounded-2xl bg-white p-6 text-left align-middle shadow-xl transition-all">
                <Dialog.Title
                  as="h3"
                  className="text-lg font-medium leading-6 text-gray-900"
                >
                  Delete Post
                </Dialog.Title>
                <div className="mt-2">
                  <p className="text-sm text-gray-500">
                    Are you sure you want to delete this post? This action cannot be
                    undone.
                  </p>
                </div>

                <div className="mt-4 flex justify-end space-x-3">
                  <button
                    type="button"
                    className="inline-flex justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus-visible:ring-2 focus-visible:ring-gray-500 focus-visible:ring-offset-2"
                    onClick={onClose}
                    disabled={isLoading}
                  >
                    Cancel
                  </button>
                  <button
                    type="button"
                    className="inline-flex justify-center rounded-md border border-transparent bg-red-600 px-4 py-2 text-sm font-medium text-white hover:bg-red-700 focus:outline-none focus-visible:ring-2 focus-visible:ring-red-500 focus-visible:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
                    onClick={onConfirm}
                    disabled={isLoading}
                  >
                    {isLoading ? 'Deleting...' : 'Delete'}
                  </button>
                </div>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </div>
      </Dialog>
    </Transition>
  );
}

================
File: components/ui/index.js
================
export { default as ComingSoonToast } from './ComingSoonToast';
export { default as ConfirmModal } from './ConfirmModal';
export { default as Modal } from './Modal';
export { default as ProfileCard } from './ProfileCard';

================
File: components/ui/Modal.jsx
================
'use client';

import { Fragment } from 'react';
import { Dialog, Transition } from '@headlessui/react';
import { X } from 'lucide-react';

export default function Modal({ isOpen, onClose, title, children }) {
  return (
    <Transition appear show={isOpen} as={Fragment}>
      <Dialog as="div" className="relative z-50" onClose={onClose}>
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black bg-opacity-25" />
        </Transition.Child>

        <div className="fixed inset-0 overflow-y-auto">
          <div className="flex min-h-full items-center justify-center p-4 text-center">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 scale-95"
              enterTo="opacity-100 scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 scale-100"
              leaveTo="opacity-0 scale-95"
            >
              <Dialog.Panel className="w-full max-w-md transform overflow-hidden rounded-2xl bg-white p-6 text-left align-middle shadow-xl transition-all">
                <Dialog.Title
                  as="div"
                  className="flex items-center justify-between mb-4"
                >
                  <h3 className="text-lg font-medium leading-6 text-gray-900">
                    {title}
                  </h3>
                  <button
                    onClick={onClose}
                    className="rounded-lg p-1 text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-primary-500"
                  >
                    <X className="w-5 h-5" />
                  </button>
                </Dialog.Title>
                {children}
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </div>
      </Dialog>
    </Transition>
  );
}

================
File: components/ui/PostMenu.tsx
================
'use client';

import { Fragment } from 'react';
import { Menu, Transition } from '@headlessui/react';
import { MoreVertical, Trash2, Pencil } from 'lucide-react';

interface PostMenuProps {
  onDelete: () => void;
  onEdit: () => void;
}

export default function PostMenu({ onDelete, onEdit }: PostMenuProps) {
  return (
    <Menu as="div" className="relative inline-block text-left">
      <Menu.Button className="p-1 rounded-lg transition-colors duration-200 text-gray-400 hover:text-gray-600 hover:bg-gray-100">
        <MoreVertical className="w-4 h-4" />
      </Menu.Button>
      <Transition
        as={Fragment}
        enter="transition ease-out duration-100"
        enterFrom="transform opacity-0 scale-95"
        enterTo="transform opacity-100 scale-100"
        leave="transition ease-in duration-75"
        leaveFrom="transform opacity-100 scale-100"
        leaveTo="transform opacity-0 scale-95"
      >
        <Menu.Items className="absolute right-0 mt-2 w-48 origin-top-right divide-y divide-gray-100 rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none">
          <div className="px-1 py-1">
            <Menu.Item>
              {({ active }) => (
                <button
                  onClick={onEdit}
                  className={`${
                    active ? 'bg-gray-100' : ''
                  } group flex w-full items-center rounded-md px-2 py-2 text-sm text-gray-700`}
                >
                  <Pencil className="mr-2 h-4 w-4" aria-hidden="true" />
                  Edit Post
                </button>
              )}
            </Menu.Item>
            <Menu.Item>
              {({ active }) => (
                <button
                  onClick={onDelete}
                  className={`${
                    active ? 'bg-red-50 text-red-600' : 'text-red-500'
                  } group flex w-full items-center rounded-md px-2 py-2 text-sm`}
                >
                  <Trash2 className="mr-2 h-4 w-4" aria-hidden="true" />
                  Delete Post
                </button>
              )}
            </Menu.Item>
          </div>
        </Menu.Items>
      </Transition>
    </Menu>
  );
}

================
File: components/ui/ProfileCard.jsx
================
'use client';

import Image from 'next/image';

export default function ProfileCard({ 
  profile, 
  actionButton,
  size = 'medium', // 'small' | 'medium'
  className = ''
}) {
  const sizeClasses = {
    small: {
      container: 'p-3',
      avatar: 'h-10 w-10',
      text: 'ml-3'
    },
    medium: {
      container: 'p-4',
      avatar: 'h-12 w-12',
      text: 'ml-4'
    }
  };

  const selectedSize = sizeClasses[size];

  return (
    <div className={`flex items-center justify-between ${selectedSize.container} bg-surface-50 rounded-lg hover:bg-surface-100 transition-colors duration-200 ${className}`}>
      <div className="flex items-center min-w-0"> {/* Add min-w-0 to allow text truncation */}
        <div className={`${selectedSize.avatar} rounded-full bg-gradient-to-br from-primary-400 to-primary-600 flex items-center justify-center text-lg font-medium text-white overflow-hidden flex-shrink-0`}>
          {profile.profile_image ? (
            <Image
              src={profile.profile_image}
              alt={profile.name}
              width={size === 'small' ? 40 : 48}
              height={size === 'small' ? 40 : 48}
              className="rounded-full object-cover"
            />
          ) : (
            <span>{profile.name?.charAt(0) || '?'}</span>
          )}
        </div>
        <div className={`${selectedSize.text} min-w-0`}> {/* Add min-w-0 to allow text truncation */}
          <p className="font-medium text-surface-900 truncate">{profile.name}</p>
          <p className="text-sm text-surface-500 truncate">@{profile.username}</p>
        </div>
      </div>
      <div className="flex-shrink-0 ml-4">
        {actionButton}
      </div>
    </div>
  );
}

================
File: components/index.js
================
// Common Components
export { default as GoogleSignInButton } from './common/GoogleSignInButton';
export { default as SignInForm } from './common/SignInForm';
export { default as Navbar } from './common/Navbar';
export { default as ProfileImageUpload } from './common/ProfileImageUpload';
export { default as SearchBar } from './common/SearchBar';

// Post Components
export { default as Post } from './post/Post';
export { default as PostGrid } from './post/PostGrid';
export { default as EditPostForm } from './post/EditPostForm';
export { default as NewPostForm } from './post/NewPostForm';

// Profile Components
export { default as ProfileHeader } from './profile/ProfileHeader';
export { default as ProfileStats } from './profile/ProfileStats';
export { default as FollowButton } from './profile/FollowButton';
export { default as FriendsList } from './profile/FriendsList';
export { default as GoalsList } from './profile/GoalsList';

// UI Components
export { default as ProfileCard } from './ui/ProfileCard';
export { default as ComingSoonToast } from './ui/ComingSoonToast';

// Dashboard Components
export { default as ProductivityDashboard } from './profile/ProductivityDashboard';

// Feed Components
export { default as WinFeed } from './feed/WinFeed';

================
File: components/README.md
================
# Components Directory

This directory contains all React components used throughout the application. The components are organized into subdirectories based on their functionality and purpose.

## Barrel File (index.js)

The `index.js` file at the root of the components directory serves as a barrel file. This pattern provides several benefits:

1. **Simplified Imports**: Instead of importing components with their full paths, you can import them directly from the components directory:
   ```javascript
   // Instead of:
   import ProfileHeader from '../../../components/profile/ProfileHeader';
   import GoalsList from '../../../components/profile/GoalsList';
   
   // You can do:
   import { ProfileHeader, GoalsList } from '../../../components';
   ```

2. **Centralized Exports**: All component exports are managed in one place, making it easier to:
   - Track available components
   - Manage component dependencies
   - Refactor component locations without updating every import

3. **Encapsulation**: The internal directory structure can be changed without affecting external imports

## Directory Organization

- **common/**: Higher-level, application-specific components that are reused across features
- **post/**: Components related to post creation, editing, and display
- **profile/**: Components for user profiles and related functionality
- **dashboard/**: Components specific to the productivity dashboard
- **feed/**: Components related to the main feed functionality
- **ui/**: Lower-level, generic UI components that could potentially be used in any app

## Best Practices

1. Always import components through the barrel file when using them outside the components directory
2. Keep component files focused and single-responsibility
3. Place new components in the most appropriate subdirectory based on their functionality
4. Update the barrel file when adding new components
5. Consider creating new subdirectories if a new category of components emerges

================
File: docs/vision.md
================
# Product Vision & Mission

### Vision

Empower meaningful connection and personal growth by enabling friends to regularly share small victories and work towards bigger goals, without the noise of traditional social media.

### Mission (Core Purpose):

- Create a trusted, distraction-free space that facilitates authentic sharing and real support.  
- Help people celebrate small daily wins and remain accountable for larger life goals through shared encouragement.  
- Provide a simple, lightweight way to maintain close bonds even when life is busy.  

## Core Problem & Value Proposition

- Many friendships fade due to lack of consistent communication, but traditional social media feels too performative, and long catch-up calls aren’t always feasible.
- Win of the Day offers a lightweight, intentional way to stay in sync without the pressure of constant updates.
- Users share small daily wins (micro-reflections) and can set bigger, long-term goals (quarterly or yearly wins), fostering support, motivation, and shared experiences.
- The app lives in a half-space between a private journal and a social feed—small, meaningful updates rather than an attention-hungry platform.

## Key Features / MVP

1. **Daily Wins** – Quick, structured logging of personal victories (e.g., “Crushed my climbing session today!” or “Meditated for 10 min”).  
   - Everyone sees each other’s daily wins in a concise, chronological feed (no infinite scroll, no complicated algorithm).  
   - A small set of positive reaction icons or short notes (like “Nice!”, “Keep going!”).  
   - No DMs or direct messages – wins can be conversation starters that people can pick up in their messaging app of choice.  

2. **Goals** – Users declare bigger self-improvement goals, which they can link their daily wins to, allowing friends to track or even join in.
3. **Shared Wins** – Friends can collaborate on goals, like a group marathon, a book club, or a shared habit challenge.  
4. **Lightweight Social Layer** – The app is not about likes/comments but meaningful engagement (e.g., reactions, encouragement, private DMs).  
5. **Low-Friction Design** – Simple, quick updates rather than lengthy journal entries or infinite scrolling.  
   - Quick sign-up flow highlighting the concept of daily micro-reflections.  
   - Lightweight push notifications reminding users to log their daily win (at a user-chosen time).

================
File: hooks/useNotifications.js
================
import { useState, useEffect } from 'react';
import { createClient } from '../utils/supabase/client';

export default function useNotifications() {
  const [notifications, setNotifications] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const supabase = createClient();

  const fetchNotifications = async () => {
    try {
      setLoading(true);
      setError(null);
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      if (userError) throw new Error('Authentication error');
      if (!user) throw new Error('No authenticated user found');

      const { data, error: fetchError } = await supabase
        .from('notifications')
        .select(`
          *,
          trigger_user:profiles!notifications_trigger_user_fkey(
            id,
            username,
            name,
            profile_image
          )
        `)
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });
      if (fetchError) throw fetchError;
      setNotifications(data || []);
    } catch (err) {
      setError(err.message || 'Failed to load notifications');
    } finally {
      setLoading(false);
    }
  };

  const markAsRead = async (notificationId) => {
    try {
      const response = await fetch('/api/notifications/mark-read', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ notificationId }),
      });
      if (!response.ok) {
        const errData = await response.json();
        throw new Error(errData.message || 'Failed to mark notification as read');
      }
      setNotifications((prev) =>
        prev.map((n) =>
          n.id === notificationId ? { ...n, is_read: true } : n
        )
      );
    } catch (err) {
      console.error('Error in markAsRead:', err);
      throw err;
    }
  };

  const markAllAsRead = async () => {
    try {
      const response = await fetch('/api/notifications/mark-read', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ markAll: true }),
      });
      if (!response.ok) {
        const errData = await response.json();
        throw new Error(errData.message || 'Failed to mark all notifications as read');
      }
      setNotifications((prev) =>
        prev.map((n) => ({ ...n, is_read: true }))
      );
    } catch (err) {
      console.error('Error in markAllAsRead:', err);
      throw err;
    }
  };

  const acceptFollowRequest = async (notificationId, followRequestId) => {
    try {
      const response = await fetch('/api/follows', {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          requestId: followRequestId,
          action: 'accept'
        }),
      });
      if (!response.ok) {
        const errData = await response.json();
        throw new Error(errData.error || 'Failed to accept follow request');
      }
      // Optionally mark the notification as read after accepting
      await markAsRead(notificationId);
      // Refresh the notifications list if needed
      await fetchNotifications();
    } catch (err) {
      console.error('Error accepting follow request:', err);
      throw err;
    }
  };

  useEffect(() => {
    let isSubscribed = true;
    let channel;

    const setupSubscription = async () => {
      try {
        const { data: { user }, error: userError } = await supabase.auth.getUser();
        if (userError || !user || !isSubscribed) return;

        channel = supabase
          .channel('notifications')
          .on(
            'postgres_changes',
            {
              event: '*',
              schema: 'public',
              table: 'notifications',
              filter: `user_id=eq.${user.id}`
            },
            (payload) => {
              if (!isSubscribed) return;
              // For INSERT, UPDATE, and DELETE events, update local state using the payload data.
              if (payload.eventType === 'INSERT') {
                setNotifications((prev) => [payload.new, ...prev]);
              } else if (payload.eventType === 'DELETE') {
                setNotifications((prev) =>
                  prev.filter((n) => n.id !== payload.old.id)
                );
              } else if (payload.eventType === 'UPDATE') {
                setNotifications((prev) =>
                  prev.map((n) =>
                    n.id === payload.new.id ? payload.new : n
                  )
                );
              }
            }
          )
          .subscribe();
      } catch (err) {
        console.error('Error in setupSubscription:', err);
      }
    };

    fetchNotifications();
    setupSubscription();

    return () => {
      isSubscribed = false;
      if (channel) {
        supabase.removeChannel(channel);
      }
    };
  }, []);

  return {
    notifications,
    loading,
    error,
    markAsRead,
    markAllAsRead,
    acceptFollowRequest,
    refresh: fetchNotifications
  };
}

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/grid.svg
================
<?xml version="1.0" encoding="UTF-8"?>
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M0 0H1V24H0V0Z" fill="white" fill-opacity="0.1"/>
  <path d="M23 0H24V24H23V0Z" fill="white" fill-opacity="0.1"/>
  <path d="M0 0V1H24V0H0Z" fill="white" fill-opacity="0.1"/>
  <path d="M0 23V24H24V23H0Z" fill="white" fill-opacity="0.1"/>
</svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/tailwind.css
================
*, ::before, ::after {
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x:  ;
  --tw-pan-y:  ;
  --tw-pinch-zoom:  ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position:  ;
  --tw-gradient-via-position:  ;
  --tw-gradient-to-position:  ;
  --tw-ordinal:  ;
  --tw-slashed-zero:  ;
  --tw-numeric-figure:  ;
  --tw-numeric-spacing:  ;
  --tw-numeric-fraction:  ;
  --tw-ring-inset:  ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur:  ;
  --tw-brightness:  ;
  --tw-contrast:  ;
  --tw-grayscale:  ;
  --tw-hue-rotate:  ;
  --tw-invert:  ;
  --tw-saturate:  ;
  --tw-sepia:  ;
  --tw-drop-shadow:  ;
  --tw-backdrop-blur:  ;
  --tw-backdrop-brightness:  ;
  --tw-backdrop-contrast:  ;
  --tw-backdrop-grayscale:  ;
  --tw-backdrop-hue-rotate:  ;
  --tw-backdrop-invert:  ;
  --tw-backdrop-opacity:  ;
  --tw-backdrop-saturate:  ;
  --tw-backdrop-sepia:  ;
  --tw-contain-size:  ;
  --tw-contain-layout:  ;
  --tw-contain-paint:  ;
  --tw-contain-style:  ;
}

::backdrop {
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x:  ;
  --tw-pan-y:  ;
  --tw-pinch-zoom:  ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position:  ;
  --tw-gradient-via-position:  ;
  --tw-gradient-to-position:  ;
  --tw-ordinal:  ;
  --tw-slashed-zero:  ;
  --tw-numeric-figure:  ;
  --tw-numeric-spacing:  ;
  --tw-numeric-fraction:  ;
  --tw-ring-inset:  ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur:  ;
  --tw-brightness:  ;
  --tw-contrast:  ;
  --tw-grayscale:  ;
  --tw-hue-rotate:  ;
  --tw-invert:  ;
  --tw-saturate:  ;
  --tw-sepia:  ;
  --tw-drop-shadow:  ;
  --tw-backdrop-blur:  ;
  --tw-backdrop-brightness:  ;
  --tw-backdrop-contrast:  ;
  --tw-backdrop-grayscale:  ;
  --tw-backdrop-hue-rotate:  ;
  --tw-backdrop-invert:  ;
  --tw-backdrop-opacity:  ;
  --tw-backdrop-saturate:  ;
  --tw-backdrop-sepia:  ;
  --tw-contain-size:  ;
  --tw-contain-layout:  ;
  --tw-contain-paint:  ;
  --tw-contain-style:  ;
}

/*
! tailwindcss v3.4.17 | MIT License | https://tailwindcss.com
*/

/*
1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)
2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)
*/

*,
::before,
::after {
  box-sizing: border-box;
  /* 1 */
  border-width: 0;
  /* 2 */
  border-style: solid;
  /* 2 */
  border-color: #e5e7eb;
  /* 2 */
}

::before,
::after {
  --tw-content: '';
}

/*
1. Use a consistent sensible line-height in all browsers.
2. Prevent adjustments of font size after orientation changes in iOS.
3. Use a more readable tab size.
4. Use the user's configured `sans` font-family by default.
5. Use the user's configured `sans` font-feature-settings by default.
6. Use the user's configured `sans` font-variation-settings by default.
7. Disable tap highlights on iOS
*/

html,
:host {
  line-height: 1.5;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
  -moz-tab-size: 4;
  /* 3 */
  -o-tab-size: 4;
     tab-size: 4;
  /* 3 */
  font-family: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  /* 4 */
  font-feature-settings: normal;
  /* 5 */
  font-variation-settings: normal;
  /* 6 */
  -webkit-tap-highlight-color: transparent;
  /* 7 */
}

/*
1. Remove the margin in all browsers.
2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.
*/

body {
  margin: 0;
  /* 1 */
  line-height: inherit;
  /* 2 */
}

/*
1. Add the correct height in Firefox.
2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)
3. Ensure horizontal rules are visible by default.
*/

hr {
  height: 0;
  /* 1 */
  color: inherit;
  /* 2 */
  border-top-width: 1px;
  /* 3 */
}

/*
Add the correct text decoration in Chrome, Edge, and Safari.
*/

abbr:where([title]) {
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
}

/*
Remove the default font size and weight for headings.
*/

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: inherit;
  font-weight: inherit;
}

/*
Reset links to optimize for opt-in styling instead of opt-out.
*/

a {
  color: inherit;
  text-decoration: inherit;
}

/*
Add the correct font weight in Edge and Safari.
*/

b,
strong {
  font-weight: bolder;
}

/*
1. Use the user's configured `mono` font-family by default.
2. Use the user's configured `mono` font-feature-settings by default.
3. Use the user's configured `mono` font-variation-settings by default.
4. Correct the odd `em` font sizing in all browsers.
*/

code,
kbd,
samp,
pre {
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  /* 1 */
  font-feature-settings: normal;
  /* 2 */
  font-variation-settings: normal;
  /* 3 */
  font-size: 1em;
  /* 4 */
}

/*
Add the correct font size in all browsers.
*/

small {
  font-size: 80%;
}

/*
Prevent `sub` and `sup` elements from affecting the line height in all browsers.
*/

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/*
1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)
2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)
3. Remove gaps between table borders by default.
*/

table {
  text-indent: 0;
  /* 1 */
  border-color: inherit;
  /* 2 */
  border-collapse: collapse;
  /* 3 */
}

/*
1. Change the font styles in all browsers.
2. Remove the margin in Firefox and Safari.
3. Remove default padding in all browsers.
*/

button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-feature-settings: inherit;
  /* 1 */
  font-variation-settings: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  font-weight: inherit;
  /* 1 */
  line-height: inherit;
  /* 1 */
  letter-spacing: inherit;
  /* 1 */
  color: inherit;
  /* 1 */
  margin: 0;
  /* 2 */
  padding: 0;
  /* 3 */
}

/*
Remove the inheritance of text transform in Edge and Firefox.
*/

button,
select {
  text-transform: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Remove default button styles.
*/

button,
input:where([type='button']),
input:where([type='reset']),
input:where([type='submit']) {
  -webkit-appearance: button;
  /* 1 */
  background-color: transparent;
  /* 2 */
  background-image: none;
  /* 2 */
}

/*
Use the modern Firefox focus style for all focusable elements.
*/

:-moz-focusring {
  outline: auto;
}

/*
Remove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)
*/

:-moz-ui-invalid {
  box-shadow: none;
}

/*
Add the correct vertical alignment in Chrome and Firefox.
*/

progress {
  vertical-align: baseline;
}

/*
Correct the cursor style of increment and decrement buttons in Safari.
*/

::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}

/*
1. Correct the odd appearance in Chrome and Safari.
2. Correct the outline style in Safari.
*/

[type='search'] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
}

/*
Remove the inner padding in Chrome and Safari on macOS.
*/

::-webkit-search-decoration {
  -webkit-appearance: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Change font properties to `inherit` in Safari.
*/

::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/*
Add the correct display in Chrome and Safari.
*/

summary {
  display: list-item;
}

/*
Removes the default spacing and border for appropriate elements.
*/

blockquote,
dl,
dd,
h1,
h2,
h3,
h4,
h5,
h6,
hr,
figure,
p,
pre {
  margin: 0;
}

fieldset {
  margin: 0;
  padding: 0;
}

legend {
  padding: 0;
}

ol,
ul,
menu {
  list-style: none;
  margin: 0;
  padding: 0;
}

/*
Reset default styling for dialogs.
*/

dialog {
  padding: 0;
}

/*
Prevent resizing textareas horizontally by default.
*/

textarea {
  resize: vertical;
}

/*
1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)
2. Set the default placeholder color to the user's configured gray 400 color.
*/

input::-moz-placeholder, textarea::-moz-placeholder {
  opacity: 1;
  /* 1 */
  color: #9ca3af;
  /* 2 */
}

input::placeholder,
textarea::placeholder {
  opacity: 1;
  /* 1 */
  color: #9ca3af;
  /* 2 */
}

/*
Set the default cursor for buttons.
*/

button,
[role="button"] {
  cursor: pointer;
}

/*
Make sure disabled buttons don't get the pointer cursor.
*/

:disabled {
  cursor: default;
}

/*
1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)
2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)
   This can trigger a poorly considered lint error in some tools but is included by design.
*/

img,
svg,
video,
canvas,
audio,
iframe,
embed,
object {
  display: block;
  /* 1 */
  vertical-align: middle;
  /* 2 */
}

/*
Constrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)
*/

img,
video {
  max-width: 100%;
  height: auto;
}

/* Make elements with the HTML hidden attribute stay hidden by default */

[hidden]:where(:not([hidden="until-found"])) {
  display: none;
}

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #171717;
    --foreground: #ffffff;
  }
}

.absolute {
  position: absolute;
}

.relative {
  position: relative;
}

.inset-0 {
  inset: 0px;
}

.mx-auto {
  margin-left: auto;
  margin-right: auto;
}

.mb-2 {
  margin-bottom: 0.5rem;
}

.mb-4 {
  margin-bottom: 1rem;
}

.mb-6 {
  margin-bottom: 1.5rem;
}

.mb-8 {
  margin-bottom: 2rem;
}

.ml-3 {
  margin-left: 0.75rem;
}

.ml-auto {
  margin-left: auto;
}

.mr-2 {
  margin-right: 0.5rem;
}

.mr-4 {
  margin-right: 1rem;
}

.mt-1 {
  margin-top: 0.25rem;
}

.mt-2 {
  margin-top: 0.5rem;
}

.mt-4 {
  margin-top: 1rem;
}

.mt-6 {
  margin-top: 1.5rem;
}

.mt-8 {
  margin-top: 2rem;
}

.block {
  display: block;
}

.inline-block {
  display: inline-block;
}

.flex {
  display: flex;
}

.inline-flex {
  display: inline-flex;
}

.table {
  display: table;
}

.hidden {
  display: none;
}

.h-10 {
  height: 2.5rem;
}

.h-16 {
  height: 4rem;
}

.h-32 {
  height: 8rem;
}

.h-5 {
  height: 1.25rem;
}

.h-7 {
  height: 1.75rem;
}

.h-8 {
  height: 2rem;
}

.h-full {
  height: 100%;
}

.h-screen {
  height: 100vh;
}

.min-h-screen {
  min-height: 100vh;
}

.w-10 {
  width: 2.5rem;
}

.w-16 {
  width: 4rem;
}

.w-5 {
  width: 1.25rem;
}

.w-7 {
  width: 1.75rem;
}

.w-8 {
  width: 2rem;
}

.w-full {
  width: 100%;
}

.max-w-2xl {
  max-width: 42rem;
}

.max-w-md {
  max-width: 28rem;
}

.max-w-xl {
  max-width: 36rem;
}

.flex-1 {
  flex: 1 1 0%;
}

.flex-shrink-0 {
  flex-shrink: 0;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

.animate-spin {
  animation: spin 1s linear infinite;
}

.cursor-pointer {
  cursor: pointer;
}

.appearance-none {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
}

.flex-col {
  flex-direction: column;
}

.items-center {
  align-items: center;
}

.justify-center {
  justify-content: center;
}

.justify-between {
  justify-content: space-between;
}

.space-x-2 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-x-reverse: 0;
  margin-right: calc(0.5rem * var(--tw-space-x-reverse));
  margin-left: calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));
}

.space-x-4 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-x-reverse: 0;
  margin-right: calc(1rem * var(--tw-space-x-reverse));
  margin-left: calc(1rem * calc(1 - var(--tw-space-x-reverse)));
}

.space-y-4 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-y-reverse: 0;
  margin-top: calc(1rem * calc(1 - var(--tw-space-y-reverse)));
  margin-bottom: calc(1rem * var(--tw-space-y-reverse));
}

.space-y-6 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-y-reverse: 0;
  margin-top: calc(1.5rem * calc(1 - var(--tw-space-y-reverse)));
  margin-bottom: calc(1.5rem * var(--tw-space-y-reverse));
}

.space-y-8 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-y-reverse: 0;
  margin-top: calc(2rem * calc(1 - var(--tw-space-y-reverse)));
  margin-bottom: calc(2rem * var(--tw-space-y-reverse));
}

.overflow-hidden {
  overflow: hidden;
}

.whitespace-pre-wrap {
  white-space: pre-wrap;
}

.rounded {
  border-radius: 0.25rem;
}

.rounded-full {
  border-radius: 9999px;
}

.rounded-lg {
  border-radius: 0.5rem;
}

.rounded-md {
  border-radius: 0.375rem;
}

.rounded-xl {
  border-radius: 0.75rem;
}

.border {
  border-width: 1px;
}

.border-4 {
  border-width: 4px;
}

.border-b-2 {
  border-bottom-width: 2px;
}

.border-t {
  border-top-width: 1px;
}

.border-t-2 {
  border-top-width: 2px;
}

.border-blue-500 {
  --tw-border-opacity: 1;
  border-color: rgb(59 130 246 / var(--tw-border-opacity, 1));
}

.border-gray-100 {
  --tw-border-opacity: 1;
  border-color: rgb(243 244 246 / var(--tw-border-opacity, 1));
}

.border-gray-200 {
  --tw-border-opacity: 1;
  border-color: rgb(229 231 235 / var(--tw-border-opacity, 1));
}

.border-gray-300 {
  --tw-border-opacity: 1;
  border-color: rgb(209 213 219 / var(--tw-border-opacity, 1));
}

.border-red-200 {
  --tw-border-opacity: 1;
  border-color: rgb(254 202 202 / var(--tw-border-opacity, 1));
}

.border-transparent {
  border-color: transparent;
}

.border-t-blue-500 {
  --tw-border-opacity: 1;
  border-top-color: rgb(59 130 246 / var(--tw-border-opacity, 1));
}

.bg-blue-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(239 246 255 / var(--tw-bg-opacity, 1));
}

.bg-blue-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(59 130 246 / var(--tw-bg-opacity, 1));
}

.bg-blue-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(37 99 235 / var(--tw-bg-opacity, 1));
}

.bg-gray-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(243 244 246 / var(--tw-bg-opacity, 1));
}

.bg-gray-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(229 231 235 / var(--tw-bg-opacity, 1));
}

.bg-gray-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(249 250 251 / var(--tw-bg-opacity, 1));
}

.bg-red-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(254 242 242 / var(--tw-bg-opacity, 1));
}

.bg-white {
  --tw-bg-opacity: 1;
  background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));
}

.bg-white\/10 {
  background-color: rgb(255 255 255 / 0.1);
}

.bg-gradient-to-br {
  background-image: linear-gradient(to bottom right, var(--tw-gradient-stops));
}

.from-blue-600 {
  --tw-gradient-from: #2563eb var(--tw-gradient-from-position);
  --tw-gradient-to: rgb(37 99 235 / 0) var(--tw-gradient-to-position);
  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);
}

.to-blue-700 {
  --tw-gradient-to: #1d4ed8 var(--tw-gradient-to-position);
}

.object-cover {
  -o-object-fit: cover;
     object-fit: cover;
}

.p-12 {
  padding: 3rem;
}

.p-2 {
  padding: 0.5rem;
}

.p-3 {
  padding: 0.75rem;
}

.p-4 {
  padding: 1rem;
}

.p-8 {
  padding: 2rem;
}

.px-2 {
  padding-left: 0.5rem;
  padding-right: 0.5rem;
}

.px-3 {
  padding-left: 0.75rem;
  padding-right: 0.75rem;
}

.px-4 {
  padding-left: 1rem;
  padding-right: 1rem;
}

.py-12 {
  padding-top: 3rem;
  padding-bottom: 3rem;
}

.py-2 {
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
}

.py-3 {
  padding-top: 0.75rem;
  padding-bottom: 0.75rem;
}

.py-8 {
  padding-top: 2rem;
  padding-bottom: 2rem;
}

.pt-2 {
  padding-top: 0.5rem;
}

.text-center {
  text-align: center;
}

.text-2xl {
  font-size: 1.5rem;
  line-height: 2rem;
}

.text-3xl {
  font-size: 1.875rem;
  line-height: 2.25rem;
}

.text-5xl {
  font-size: 3rem;
  line-height: 1;
}

.text-lg {
  font-size: 1.125rem;
  line-height: 1.75rem;
}

.text-sm {
  font-size: 0.875rem;
  line-height: 1.25rem;
}

.text-xl {
  font-size: 1.25rem;
  line-height: 1.75rem;
}

.text-xs {
  font-size: 0.75rem;
  line-height: 1rem;
}

.font-bold {
  font-weight: 700;
}

.font-extrabold {
  font-weight: 800;
}

.font-medium {
  font-weight: 500;
}

.font-semibold {
  font-weight: 600;
}

.italic {
  font-style: italic;
}

.tracking-tight {
  letter-spacing: -0.025em;
}

.text-blue-100 {
  --tw-text-opacity: 1;
  color: rgb(219 234 254 / var(--tw-text-opacity, 1));
}

.text-blue-600 {
  --tw-text-opacity: 1;
  color: rgb(37 99 235 / var(--tw-text-opacity, 1));
}

.text-gray-500 {
  --tw-text-opacity: 1;
  color: rgb(107 114 128 / var(--tw-text-opacity, 1));
}

.text-gray-600 {
  --tw-text-opacity: 1;
  color: rgb(75 85 99 / var(--tw-text-opacity, 1));
}

.text-gray-700 {
  --tw-text-opacity: 1;
  color: rgb(55 65 81 / var(--tw-text-opacity, 1));
}

.text-gray-800 {
  --tw-text-opacity: 1;
  color: rgb(31 41 55 / var(--tw-text-opacity, 1));
}

.text-gray-900 {
  --tw-text-opacity: 1;
  color: rgb(17 24 39 / var(--tw-text-opacity, 1));
}

.text-red-500 {
  --tw-text-opacity: 1;
  color: rgb(239 68 68 / var(--tw-text-opacity, 1));
}

.text-red-600 {
  --tw-text-opacity: 1;
  color: rgb(220 38 38 / var(--tw-text-opacity, 1));
}

.text-red-700 {
  --tw-text-opacity: 1;
  color: rgb(185 28 28 / var(--tw-text-opacity, 1));
}

.text-white {
  --tw-text-opacity: 1;
  color: rgb(255 255 255 / var(--tw-text-opacity, 1));
}

.antialiased {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.placeholder-gray-400::-moz-placeholder {
  --tw-placeholder-opacity: 1;
  color: rgb(156 163 175 / var(--tw-placeholder-opacity, 1));
}

.placeholder-gray-400::placeholder {
  --tw-placeholder-opacity: 1;
  color: rgb(156 163 175 / var(--tw-placeholder-opacity, 1));
}

.shadow {
  --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
  --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}

.shadow-sm {
  --tw-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}

.transition-colors {
  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}

.hover\:bg-blue-600:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(37 99 235 / var(--tw-bg-opacity, 1));
}

.hover\:bg-blue-700:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(29 78 216 / var(--tw-bg-opacity, 1));
}

.hover\:bg-gray-50:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(249 250 251 / var(--tw-bg-opacity, 1));
}

.hover\:text-blue-500:hover {
  --tw-text-opacity: 1;
  color: rgb(59 130 246 / var(--tw-text-opacity, 1));
}

.hover\:text-red-500:hover {
  --tw-text-opacity: 1;
  color: rgb(239 68 68 / var(--tw-text-opacity, 1));
}

.focus\:border-blue-500:focus {
  --tw-border-opacity: 1;
  border-color: rgb(59 130 246 / var(--tw-border-opacity, 1));
}

.focus\:outline-none:focus {
  outline: 2px solid transparent;
  outline-offset: 2px;
}

.focus\:ring-2:focus {
  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);
  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
}

.focus\:ring-blue-500:focus {
  --tw-ring-opacity: 1;
  --tw-ring-color: rgb(59 130 246 / var(--tw-ring-opacity, 1));
}

.focus\:ring-offset-2:focus {
  --tw-ring-offset-width: 2px;
}

.disabled\:opacity-50:disabled {
  opacity: 0.5;
}

@media (min-width: 640px) {
  .sm\:mx-auto {
    margin-left: auto;
    margin-right: auto;
  }

  .sm\:w-full {
    width: 100%;
  }

  .sm\:max-w-md {
    max-width: 28rem;
  }

  .sm\:rounded-lg {
    border-radius: 0.5rem;
  }

  .sm\:p-12 {
    padding: 3rem;
  }

  .sm\:px-10 {
    padding-left: 2.5rem;
    padding-right: 2.5rem;
  }

  .sm\:px-6 {
    padding-left: 1.5rem;
    padding-right: 1.5rem;
  }

  .sm\:text-sm {
    font-size: 0.875rem;
    line-height: 1.25rem;
  }
}

@media (min-width: 1024px) {
  .lg\:flex {
    display: flex;
  }

  .lg\:w-1\/2 {
    width: 50%;
  }

  .lg\:max-w-3xl {
    max-width: 48rem;
  }

  .lg\:px-8 {
    padding-left: 2rem;
    padding-right: 2rem;
  }
}

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: styles/global.css
================
/* styles/globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: supabase/examples/20250207_01_add_post_reactions.sql
================
-- Migration: Add reactions to posts
-- Description: Allow users to react to posts with emojis
-- up.sql

-- Create reactions table
create table if not exists public.reactions (
    id uuid default gen_random_uuid() primary key,
    user_id uuid references public.profiles(id) on delete cascade not null,
    post_id uuid references public.posts(id) on delete cascade not null,
    emoji text not null,
    created_at timestamp with time zone default timezone('utc', now()) not null,
    unique(user_id, post_id, emoji)
);

-- Create index for better performance
create index if not exists idx_reactions_post_id on public.reactions(post_id);

-- Enable RLS
alter table public.reactions enable row level security;

-- Set up RLS policies
create policy "Reactions are viewable by everyone"
    on reactions for select
    using (true);

create policy "Users can react to posts"
    on reactions for insert
    with check (auth.uid() = user_id);

create policy "Users can remove their reactions"
    on reactions for delete
    using (auth.uid() = user_id);

-- down.sql
/*
drop policy if exists "Users can remove their reactions" on public.reactions;
drop policy if exists "Users can react to posts" on public.reactions;
drop policy if exists "Reactions are viewable by everyone" on public.reactions;
drop index if exists idx_reactions_post_id;
drop table if exists public.reactions;
*/

================
File: supabase/examples/20250207_02_add_post_comments.sql
================
-- Migration: Add comments to posts
-- Description: Allow users to comment on posts
-- up.sql

-- Create comments table
create table if not exists public.comments (
    id uuid default gen_random_uuid() primary key,
    post_id uuid references public.posts(id) on delete cascade not null,
    user_id uuid references public.profiles(id) on delete cascade not null,
    content text not null check (char_length(content) <= 500),
    created_at timestamp with time zone default timezone('utc', now()) not null,
    updated_at timestamp with time zone default timezone('utc', now()) not null
);

-- Create indexes for better performance
create index if not exists idx_comments_post_id on public.comments(post_id);
create index if not exists idx_comments_user_id on public.comments(user_id);

-- Enable RLS
alter table public.comments enable row level security;

-- Set up RLS policies
create policy "Comments are viewable by post viewers"
    on comments for select
    using (
        exists (
            select 1 from public.posts
            where id = comments.post_id
            and (not is_private or auth.uid() = user_id)
        )
    );

create policy "Users can comment on posts"
    on comments for insert
    with check (
        exists (
            select 1 from public.posts
            where id = comments.post_id
            and (not is_private or auth.uid() = user_id)
        )
    );

create policy "Users can update own comments"
    on comments for update
    using (auth.uid() = user_id);

create policy "Users can delete own comments"
    on comments for delete
    using (auth.uid() = user_id);

-- Create trigger for updated_at
create trigger update_comments_updated_at
    before update on public.comments
    for each row
    execute function update_updated_at_column();

-- down.sql
/*
drop trigger if exists update_comments_updated_at on public.comments;
drop policy if exists "Users can delete own comments" on public.comments;
drop policy if exists "Users can update own comments" on public.comments;
drop policy if exists "Users can comment on posts" on public.comments;
drop policy if exists "Comments are viewable by post viewers" on public.comments;
drop index if exists idx_comments_user_id;
drop index if exists idx_comments_post_id;
drop table if exists public.comments;
*/

================
File: supabase/examples/20250207_03_add_habit_streaks.sql
================
-- Migration: Add habit streaks
-- Description: Add streak tracking to habits
-- up.sql

-- Add streak columns to habits table
alter table public.habits
add column if not exists current_streak integer default 0,
add column if not exists longest_streak integer default 0,
add column if not exists last_completion_date date;

-- Create function to update streaks
create or replace function update_habit_streak()
returns trigger as $$
declare
    last_completion date;
    days_since_last integer;
begin
    -- Get the last completion date before this one
    select completed_at::date into last_completion
    from public.habit_completions
    where habit_id = new.habit_id
    and completed_at < new.completed_at
    order by completed_at desc
    limit 1;

    -- Update the habit's streak information
    update public.habits
    set
        last_completion_date = new.completed_at::date,
        current_streak = case
            when last_completion_date is null then 1
            when last_completion_date = (new.completed_at::date - interval '1 day')::date then current_streak + 1
            when last_completion_date = new.completed_at::date then current_streak
            else 1
        end,
        longest_streak = greatest(
            longest_streak,
            case
                when last_completion_date is null then 1
                when last_completion_date = (new.completed_at::date - interval '1 day')::date then current_streak + 1
                when last_completion_date = new.completed_at::date then current_streak
                else 1
            end
        )
    where id = new.habit_id;

    return new;
end;
$$ language plpgsql security definer;

-- Create trigger for streak updates
create trigger update_habit_streak_on_completion
    after insert on public.habit_completions
    for each row
    execute function update_habit_streak();

-- down.sql
/*
drop trigger if exists update_habit_streak_on_completion on public.habit_completions;
drop function if exists update_habit_streak();
alter table public.habits
    drop column if exists current_streak,
    drop column if exists longest_streak,
    drop column if exists last_completion_date;
*/

================
File: supabase/functions/08_username_updates.sql
================
-- Function to check if a user can update their username
create or replace function public.check_username_update_eligibility(user_id uuid)
returns boolean
language plpgsql
security definer set search_path = public
as $$
declare
  last_update timestamptz;
begin
  -- Verify the user is checking their own eligibility
  if auth.uid() <> user_id then
    return false;
  end if;

  -- Get the last username update timestamp
  select username_updated_at into last_update
  from public.profiles
  where id = user_id;

  -- If never updated or last update was more than 30 days ago, return true
  return (
    last_update is null or
    last_update < timezone('utc', now()) - interval '30 days'
  );
end;
$$;

-- Function to automatically update username_updated_at timestamp
create or replace function public.update_username_timestamp()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  -- Only allow updates for the authenticated user
  if auth.uid() <> NEW.id then
    raise exception 'You can only update your own username.';
  end if;

  -- Only update timestamp if username actually changed
  if NEW.username is distinct from OLD.username then
    -- Verify the user hasn't updated their username in the last 30 days
    if OLD.username_updated_at is not null and 
       OLD.username_updated_at > timezone('utc', now()) - interval '30 days' then
      raise exception 'You can only update your username once every 30 days.';
    end if;
    
    NEW.username_updated_at = timezone('utc', now());
  end if;
  return NEW;
end;
$$;

-- Create trigger for username updates
drop trigger if exists set_username_update_time on public.profiles;
create trigger set_username_update_time
  before update on public.profiles
  for each row
  execute function public.update_username_timestamp();

-- Enable RLS
alter table public.profiles enable row level security;

-- Add policies for username updates
create policy "Enable users to check their username update eligibility"
  on public.profiles
  for select
  using (auth.uid() = id);

create policy "Enable users to update their own username"
  on public.profiles
  for update
  using (auth.uid() = id)
  with check (
    auth.uid() = id and
    (
      -- Allow update if username is not changing
      NEW.username is not distinct from OLD.username
      or
      -- Or if enough time has passed since last update
      OLD.username_updated_at is null
      or
      OLD.username_updated_at < timezone('utc', now()) - interval '30 days'
    )
  );

================
File: supabase/migrations/20240207_update_post_policies.sql
================
-- Update post visibility policies
begin;
    -- Drop existing post visibility policy
    drop policy if exists "Public posts are viewable by everyone" on posts;

    -- Create new policy for post visibility
    create policy "Posts are viewable by followers and post owner"
        on posts for select
        using (
            auth.uid() = user_id -- User can see their own posts
            or (
                exists ( -- User follows the post creator
                    select 1 from public.follows
                    where follower_id = auth.uid()
                    and following_id = posts.user_id
                )
            )
        );

    -- Update post images policy to match post visibility
    drop policy if exists "Post images are viewable by post viewers" on post_images;
    
    create policy "Post images are viewable by post owner and followers"
        on post_images for select
        using (
            exists (
                select 1 from public.posts
                where id = post_images.post_id
                and (
                    auth.uid() = user_id -- Post owner can see images
                    or (
                        exists ( -- Followers can see images
                            select 1 from public.follows
                            where follower_id = auth.uid()
                            and following_id = posts.user_id
                        )
                    )
                )
            )
        );
commit;

================
File: supabase/.gitignore
================
# Supabase
.branches
.temp

# dotenvx
.env.keys
.env.local
.env.*.local

================
File: supabase/01_profiles.sql
================
-- Enable necessary extensions
create extension if not exists "uuid-ossp";
create extension if not exists pgcrypto;

-- Create profiles table
create table if not exists public.profiles (
    id uuid references auth.users(id) on delete cascade primary key,
    name text,
    email text unique,
    bio text check (char_length(bio) <= 1000),
    profile_image text,
    created_at timestamp with time zone default timezone('utc', now()) not null,
    updated_at timestamp with time zone default timezone('utc', now()) not null
);

-- Add username column to profiles table
alter table public.profiles
  add column username text unique,
  add column username_updated_at timestamp with time zone,
  add constraint username_format check (
    username ~ '^[a-zA-Z0-9_]{3,20}$' and
    username !~ '^[0-9_]' -- Cannot start with number or underscore
  );

-- Create index for username lookups
create index if not exists profiles_username_idx on profiles (username);

-- Create function to handle new user creation
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
declare
    display_name text;
    temp_username text;
begin
    if new.raw_user_meta_data->>'full_name' is not null then
        display_name := new.raw_user_meta_data->>'full_name';
    else
        display_name := split_part(new.email, '@', 1);
    end if;

    -- Generate initial username from email
    temp_username := split_part(new.email, '@', 1);

    -- Ensure uniqueness by appending random string if needed
    while exists (select 1 from profiles where username = temp_username) loop
        temp_username := temp_username || substring(md5(random()::text) from 1 for 4);
    end loop;

    insert into public.profiles (id, name, email, username)
    values (
        new.id,
        display_name,
        new.email,
        temp_username
    );
    return new;
end;
$$;

-- Create trigger for new user handling
create or replace trigger on_auth_user_created
    after insert on auth.users
    for each row execute function public.handle_new_user();

-- Enable RLS
alter table public.profiles enable row level security;

-- Drop existing policies if they exist
drop policy if exists "Profiles are viewable by everyone" on profiles;
drop policy if exists "Users can update own profile" on profiles;
drop policy if exists "Users can insert own profile" on profiles;

-- Set up RLS policies
create policy "Profiles are viewable by everyone"
    on profiles for select
    using (true);

create policy "Users can update own profile"
    on profiles for update
    using (auth.uid() = id)
    with check (auth.uid() = id);

create policy "Users can insert own profile"
    on profiles for insert
    with check (auth.uid() = id);

-- Create an index on email for faster searches
create index if not exists profiles_email_idx on profiles (email);

-- Enable the pg_trgm extension if not already enabled
CREATE EXTENSION IF NOT EXISTS pg_trgm;
-- Create indexes for faster text search
CREATE INDEX IF NOT EXISTS idx_profiles_username_search ON profiles USING gin (username gin_trgm_ops);
CREATE INDEX IF NOT EXISTS idx_profiles_name_search ON profiles USING gin (name gin_trgm_ops);

================
File: supabase/02_follows.sql
================
-- Create follows table
create table if not exists public.follows (
    id uuid default gen_random_uuid() primary key,
    follower_id uuid references public.profiles(id) on delete cascade not null,
    following_id uuid references public.profiles(id) on delete cascade not null,
    created_at timestamp with time zone default timezone('utc', now()) not null,
    unique(follower_id, following_id)
);

-- Create indexes for better performance
create index if not exists idx_follows_follower on public.follows(follower_id);
create index if not exists idx_follows_following on public.follows(following_id);

-- Enable RLS
alter table public.follows enable row level security;

-- Set up RLS policies for follows
create policy "Users can see all follows"
    on follows for select
    using (true);
    
-- Create a new policy that allows:
-- - The authenticated user is the follower (normal case), OR
-- - The authenticated user is the following user AND there exists a pending follow request 
--   from the follower to the following.
create policy "Users can follow others"
  on follows
  for insert
  with check (
    auth.uid() = follower_id OR
    (
      auth.uid() = following_id AND 
      exists (
        select 1 from follow_requests
        where follow_requests.from_user = follower_id
          and follow_requests.to_user = following_id
          and follow_requests.status = 'pending'
      )
    )
  );

create policy "Users can unfollow"
    on follows for delete
    using (auth.uid() = follower_id);

================
File: supabase/03_categories.sql
================
-- Drop existing tables if they exist
drop table if exists public.post_categories;
drop table if exists public.win_categories;

-- Create categories table
create table if not exists public.categories (
    id uuid default gen_random_uuid() primary key,
    name text not null unique,
    color text not null,
    icon text not null,
    created_at timestamp with time zone default timezone('utc', now()) not null
);

-- Enable RLS
alter table public.categories enable row level security;

-- Set up RLS policies
create policy "Categories are viewable by everyone"
    on categories for select
    using (true);

-- Insert default categories
insert into public.categories (name, color, icon) values
    ('Work', '#4F46E5', '💼'),
    ('Health', '#10B981', '🏃‍♂️'),
    ('Learning', '#F59E0B', '📚'),
    ('Relationships', '#EC4899', '❤️'),
    ('Personal', '#8B5CF6', '🎯'),
    ('Finance', '#059669', '💰'),
    ('Creativity', '#F97316', '🎨'),
    ('Other', '#6B7280', '✨')
on conflict (name) do update set
    color = excluded.color,
    icon = excluded.icon;

================
File: supabase/04_posts.sql
================
-- Drop existing tables if they exist
drop table if exists public.post_images;
drop table if exists public.likes;
drop table if exists public.posts;

-- Create posts table
create table if not exists public.posts (
    id uuid default gen_random_uuid() primary key,
    content text not null check (char_length(content) <= 1000),
    user_id uuid not null,
    category_id uuid references public.categories(id),
    is_private boolean default false,
    created_at timestamp with time zone default timezone('utc', now()) not null,
    updated_at timestamp with time zone default timezone('utc', now()) not null,
    foreign key (user_id) references auth.users(id) on delete cascade
);

-- Create post_images table
create table if not exists public.post_images (
    id uuid default uuid_generate_v4() primary key,
    post_id uuid references public.posts(id) on delete cascade not null,
    image_url text not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

begin;
    -- Drop the existing foreign key constraints
    alter table public.posts 
    drop constraint if exists posts_user_id_fkey;

    alter table public.likes
    drop constraint if exists likes_user_id_fkey;

    -- Add the new foreign key constraints
    alter table public.posts
    add constraint posts_user_id_fkey 
    foreign key (user_id) 
    references auth.users(id) 
    on delete cascade;

    alter table public.likes
    add constraint likes_user_id_fkey
    foreign key (user_id)
    references auth.users(id)
    on delete cascade;
commit;

-- Enable RLS
alter table public.posts enable row level security;
alter table public.likes enable row level security;
alter table public.post_images enable row level security;

-- Drop existing policies
drop policy if exists "Public posts are viewable by everyone" on posts;
drop policy if exists "Users can create posts" on posts;
drop policy if exists "Users can update own posts" on posts;
drop policy if exists "Users can delete own posts" on posts;
drop policy if exists "Likes are viewable by everyone" on likes;
drop policy if exists "Users can like posts" on likes;
drop policy if exists "Users can unlike posts" on likes;
drop policy if exists "Post images are viewable by post viewers" on post_images;
drop policy if exists "Users can add images to own posts" on post_images;
drop policy if exists "Users can delete images from own posts" on post_images;

-- Set up RLS policies for posts
create policy "Public posts are viewable by everyone"
    on posts for select
    using (not is_private or auth.uid() = user_id);

create policy "Users can create posts"
    on posts for insert
    with check (auth.uid() = user_id);

create policy "Users can update own posts"
    on posts for update
    using (auth.uid() = user_id)
    with check (
        auth.uid() = user_id
        and (
            -- Allow updating content, category, privacy, and updated_at
            (content is not null and char_length(content) <= 1000)
            and (category_id is null or category_id in (select id from public.categories))
            and (is_private is not null)
            and (updated_at is not null)
            -- Prevent updating user_id and created_at
            and user_id = (select user_id from public.posts where id = id)
            and created_at = (select created_at from public.posts where id = id)
        )
    );

create policy "Users can delete own posts"
    on posts for delete
    using (auth.uid() = user_id);

-- Set up RLS policies for likes
create policy "Likes are viewable by everyone"
    on likes for select
    using (true);

create policy "Users can like posts"
    on likes for insert
    with check (auth.uid() = user_id);

create policy "Users can unlike posts"
    on likes for delete
    using (auth.uid() = user_id);

-- Set up RLS policies for post images
create policy "Post images are viewable by post viewers"
    on post_images for select
    using (
        exists (
            select 1 from public.posts
            where id = post_images.post_id
            and (not is_private or auth.uid() = user_id)
        )
    );

create policy "Users can add images to own posts"
    on post_images for insert
    with check (
        exists (
            select 1 from public.posts
            where id = post_images.post_id
            and auth.uid() = user_id
        )
    );

create policy "Users can delete images from own posts"
    on post_images for delete
    using (
        exists (
            select 1 from public.posts
            where id = post_images.post_id
            and auth.uid() = user_id
        )
    );

-- Create function to update updated_at timestamp
create or replace function public.handle_updated_at()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
    new.updated_at = now();
    return new;
end;
$$;

-- Create trigger to automatically update updated_at
drop trigger if exists on_post_update on posts;
create trigger on_post_update
    before update on posts
    for each row
    execute function handle_updated_at();

================
File: supabase/05_goals.sql
================
-- Create habits table
create table if not exists public.habits (
    id uuid default gen_random_uuid() primary key,
    user_id uuid not null,
    name text not null,
    description text,
    frequency text not null,
    category_id uuid,
    created_at timestamp with time zone default timezone('utc', now()) not null,
    updated_at timestamp with time zone default timezone('utc', now()) not null,
    foreign key (user_id) references auth.users(id) on delete cascade,
    foreign key (category_id) references public.categories(id) on delete set null
);

-- Create habit completions table
create table if not exists public.habit_completions (
    id uuid default gen_random_uuid() primary key,
    habit_id uuid references public.habits(id) on delete cascade not null,
    completed_at timestamp with time zone default timezone('utc', now()) not null,
    created_at timestamp with time zone default timezone('utc', now()) not null
);

-- Enable RLS
alter table public.habits enable row level security;
alter table public.habit_completions enable row level security;

-- Set up RLS policies for habits
create policy "Users can view own habits"
    on habits for select
    using (auth.uid() = user_id);

create policy "Users can create habits"
    on habits for insert
    with check (auth.uid() = user_id);

create policy "Users can update own habits"
    on habits for update
    using (auth.uid() = user_id)
    with check (auth.uid() = user_id);

create policy "Users can delete own habits"
    on habits for delete
    using (auth.uid() = user_id);

-- Set up RLS policies for habit completions
create policy "Users can view own habit completions"
    on habit_completions for select
    using (
        exists (
            select 1 from public.habits
            where id = habit_completions.habit_id
            and auth.uid() = user_id
        )
    );

create policy "Users can mark habits as complete"
    on habit_completions for insert
    with check (
        exists (
            select 1 from public.habits
            where id = habit_completions.habit_id
            and auth.uid() = user_id
        )
    );

create policy "Users can delete habit completions"
    on habit_completions for delete
    using (
        exists (
            select 1 from public.habits
            where id = habit_completions.habit_id
            and auth.uid() = user_id
        )
    );

================
File: supabase/06_storage.sql
================
-- 1. Ensure required extension and column exist
create extension if not exists "uuid-ossp";

alter table storage.buckets 
  add column if not exists public boolean default false;

-- 2. Create storage buckets for post and profile images
insert into storage.buckets (id, name)
values 
  ('post-images', 'post-images'),
  ('profile-images', 'profile-images')
on conflict (id) do nothing;

-- 3. Set up storage policies for post images

-- Public: Anyone can view post images
create policy "Post images are publicly accessible"
    on storage.objects for select
    using (bucket_id = 'post-images');

-- Upload: Only authenticated users can upload to the 'post-images' bucket
create policy "Users can upload post images"
    on storage.objects for insert
    with check (
        bucket_id = 'post-images' 
        and auth.role() = 'authenticated'
    );

-- Delete: Only users owning the folder (assumed to be set to their user ID) can delete images
create policy "Users can delete own post images"
    on storage.objects for delete
    using (
        bucket_id = 'post-images'
        and auth.uid()::text = (storage.foldername(name))[1]
    );

-- 4. Set up storage policies for profile images

-- Public: Profile images are publicly accessible
create policy "Profile images are publicly accessible"
    on storage.objects for select
    using (bucket_id = 'profile-images');

-- Upload: Only authenticated users can upload profile images into their own folder
create policy "Users can upload their own profile image"
    on storage.objects for insert
    with check (
        bucket_id = 'profile-images'
        and auth.role() = 'authenticated'
        and auth.uid()::text = (storage.foldername(name))[1]
    );

-- Update: Only the owner (folder name) can update their profile image
create policy "Users can update their own profile image"
    on storage.objects for update
    using (
        bucket_id = 'profile-images'
        and auth.uid()::text = (storage.foldername(name))[1]
    );

-- Delete: Only the owner (folder name) can delete their profile image
create policy "Users can delete their own profile image"
    on storage.objects for delete
    using (
        bucket_id = 'profile-images'
        and auth.uid()::text = (storage.foldername(name))[1]
    );

================
File: supabase/07_likes.sql
================
-- Create likes table if it doesn't exist
create table if not exists public.likes (
    id uuid default gen_random_uuid() primary key,
    user_id uuid references public.profiles(id) on delete cascade not null,
    post_id uuid references public.posts(id) on delete cascade not null,
    created_at timestamp with time zone default timezone('utc', now()) not null,
    unique(user_id, post_id)
);

ALTER TABLE public.likes
  ADD CONSTRAINT likes_profile_fkey
  FOREIGN KEY (user_id)
  REFERENCES public.profiles(id)
  ON DELETE CASCADE;


-- Create indexes for performance
create index if not exists idx_likes_user on public.likes(user_id);
create index if not exists idx_likes_post on public.likes(post_id);

-- Enable Row Level Security (RLS)
alter table public.likes enable row level security;

-- RLS policy: Everyone can see likes
create policy "Users can see all likes"
    on public.likes for select
    using (true);

-- RLS policy: Users can insert likes only if:
-- 1. They are acting as themselves (auth.uid() = user_id)
-- 2. They follow the post's author. We enforce this by joining the posts table to the follows table.
create policy "Users can like posts only if following"
    on public.likes for insert
    with check (
         auth.uid() = user_id
         and exists (
             select 1
             from public.follows f
             join public.posts p on p.user_id = f.following_id
             where f.follower_id = auth.uid() and p.id = post_id
         )
    );

-- RLS policy: Users can delete (i.e. unlike) their own likes
create policy "Users can unlike posts"
    on public.likes for delete
    using (auth.uid() = user_id);

================
File: supabase/08_follow_requests.sql
================
-- up.sql
create table if not exists public.follow_requests (
  id uuid default gen_random_uuid() primary key,
  from_user uuid not null,
  to_user uuid not null,
  status text default 'pending' not null,
  created_at timestamp with time zone default timezone('utc', now()) not null
  last_processed_at timestamp with time zone
);

alter table public.follow_requests
  add constraint follow_requests_from_fk foreign key (from_user) references public.profiles(id) on delete cascade;

alter table public.follow_requests
  add constraint follow_requests_to_fk foreign key (to_user) references public.profiles(id) on delete cascade;

alter table public.follow_requests enable row level security;

create policy "Follow requests are viewable by sender or recipient"
  on public.follow_requests for select
  using (auth.uid() = to_user OR auth.uid() = from_user);

create policy "Users can insert follow requests for themselves"
  on public.follow_requests for insert
  with check (auth.uid() = from_user);


CREATE OR REPLACE FUNCTION public.notify_follow_request_update()
RETURNS TRIGGER AS $$
BEGIN
  -- Only act when the status has changed from 'pending'
  IF NEW.status <> OLD.status THEN
    IF NEW.status = 'accepted' THEN
      UPDATE public.notifications
      SET 
        type = 'follow_request_accepted',
        message = 'Your follow request was accepted.',
        is_read = true  -- Optionally mark it as read
      WHERE reference_id = NEW.id;
    ELSIF NEW.status = 'rejected' THEN
      UPDATE public.notifications
      SET 
        type = 'follow_request_rejected',
        message = 'Your follow request was declined.',
        is_read = true
      WHERE reference_id = NEW.id;
    END IF;
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER follow_request_status_update_trigger
AFTER UPDATE ON public.follow_requests
FOR EACH ROW
EXECUTE FUNCTION public.notify_follow_request_update();

================
File: supabase/09_notifications.sql
================
create table if not exists public.notifications (
  id uuid default gen_random_uuid() primary key,
  user_id uuid not null, -- target user who should see the notification
  type text not null,    -- e.g., 'like', 'follow_request'
  trigger_user_id uuid not null, -- user who triggered the notification
  reference_id uuid,     -- optional: e.g., post id or follow request id
  message text,          -- human-readable message (optional)
  is_read boolean default false,
  created_at timestamp with time zone default timezone('utc', now()) not null
);

ALTER TABLE public.notifications
ADD COLUMN follow_request_status text;

alter table public.notifications
  add constraint notifications_user_fk
  foreign key (user_id) references public.profiles(id) on delete cascade;

alter table public.notifications
  add constraint notifications_trigger_user_fkey
  foreign key (trigger_user_id) references public.profiles(id) on delete cascade;

create index if not exists idx_notifications_user_read on public.notifications(user_id, is_read);

alter table public.notifications enable row level security;

CREATE POLICY "Users can update their own notifications"
  ON public.notifications
  FOR UPDATE
  USING (auth.uid() = user_id);

CREATE POLICY "Users can update their received follow requests"
ON public.follow_requests FOR UPDATE
USING (auth.uid() = to_user)
WITH CHECK (auth.uid() = to_user);

create policy "Notifications are viewable by owner"
  on public.notifications for select
  using (auth.uid() = user_id);

-- This ensures that only the backend (Supabase's service role) can insert notifications via triggers
-- Users themselves cannot manually insert notifications, preventing abuse.
create policy "Server can insert notifications"
  on public.notifications for insert
  with check (auth.role() = 'service_role');

create or replace function public.notify_like() 
returns trigger 
language plpgsql security definer
as $$
declare
  post_owner uuid;
begin
  select user_id into post_owner from public.posts where id = NEW.post_id;
  
  if post_owner is not null and post_owner <> NEW.user_id then
    insert into public.notifications (user_id, type, trigger_user_id, reference_id, message)
    values (post_owner, 'like', NEW.user_id, NEW.post_id, 'Someone liked your post.');
  end if;
  return NEW;
end;
$$;

drop trigger if exists trigger_notify_like on public.likes;
create trigger trigger_notify_like
after insert on public.likes
for each row execute function public.notify_like();

-- Drop the old trigger if it exists
drop trigger if exists follow_request_trigger on public.follows;

CREATE OR REPLACE FUNCTION public.notify_follow_request()
RETURNS TRIGGER AS $$
BEGIN
  -- Insert a notification for the recipient (to_user)
  INSERT INTO public.notifications (
    user_id,
    trigger_user_id,
    type,
    reference_id,
    message
  )
  VALUES (
    NEW.to_user,         -- The user receiving the follow request
    NEW.from_user,       -- The user who sent the request
    'follow_request',    -- Notification type
    NEW.id,              -- Reference to the follow request record
    'You have a new follow request.'
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- DROP TRIGGER IF EXISTS follow_request_notification_trigger ON public.follow_requests;
CREATE TRIGGER follow_request_notification_trigger
AFTER INSERT ON public.follow_requests
FOR EACH ROW
EXECUTE FUNCTION public.notify_follow_request();

================
File: supabase/config.toml
================
# For detailed configuration reference documentation, visit:
# https://supabase.com/docs/guides/local-development/cli/config
# A string used to distinguish different Supabase projects on the same host. Defaults to the
# working directory name when running `supabase init`.
project_id = "win-of-the-day"

[api]
enabled = true
# Port to use for the API URL.
port = 54321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. `public` and `graphql_public` schemas are included by default.
schemas = ["public", "graphql_public"]
# Extra schemas to add to the search_path of every request.
extra_search_path = ["public", "extensions"]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[api.tls]
# Enable HTTPS endpoints locally using a self-signed certificate.
enabled = false

[db]
# Port to use for the local database URL.
port = 54322
# Port used by db diff command to initialize the shadow database.
shadow_port = 54320
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 15

[db.pooler]
enabled = false
# Port to use for the local connection pooler.
port = 54329
# Specifies when a server connection can be reused by other clients.
# Configure one of the supported pooler modes: `transaction`, `session`.
pool_mode = "transaction"
# How many server connections to allow per user/database pair.
default_pool_size = 20
# Maximum number of client connections allowed.
max_client_conn = 100

[db.seed]
# If enabled, seeds the database after migrations during a db reset.
enabled = true
# Specifies an ordered list of seed files to load during db reset.
# Supports glob patterns relative to supabase directory: "./seeds/*.sql"
sql_paths = ["./seed.sql"]

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv4)
# ip_version = "IPv6"
# The maximum length in bytes of HTTP request headers. (default: 4096)
# max_header_length = 4096

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 54323
# External URL of the API server that frontend connects to.
api_url = "http://127.0.0.1"

[storage]
enabled = true

[storage.buckets]
profile-images = { public = true, file_size_limit = "5MB", allowed_mime_types = ["image/png", "image/jpeg", "image/gif"] }
post-images = { public = true, file_size_limit = "10MB", allowed_mime_types = ["image/png", "image/jpeg", "image/gif"] }

[auth]
enabled = true
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://127.0.0.1:3000"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["https://127.0.0.1:3000"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 (1 week).
jwt_expiry = 3600
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true
# Allow/disallow anonymous sign-ins to your project.
enable_anonymous_sign_ins = false
# Allow/disallow testing manual linking of accounts
enable_manual_linking = false
# Passwords shorter than this value will be rejected as weak. Minimum 6, recommended 8 or more.
minimum_password_length = 6
# Passwords that do not meet the following requirements will be rejected as weak. Supported values
# are: `letters_digits`, `lower_upper_letters_digits`, `lower_upper_letters_digits_symbols`
password_requirements = ""

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = false
# If enabled, users will need to reauthenticate or have logged in recently to change their password.
secure_password_change = false
# Controls the minimum amount of time that must pass before sending another signup confirmation or password reset email.
max_frequency = "1s"
# Number of characters used in the email OTP.
otp_length = 6
# Number of seconds before the email OTP expires (defaults to 1 hour).
otp_expiry = 3600

# Use a production-ready SMTP server
# [auth.email.smtp]
# enabled = true
# host = "smtp.sendgrid.net"
# port = 587
# user = "apikey"
# pass = "env(SENDGRID_API_KEY)"
# admin_email = "admin@email.com"
# sender_name = "Admin"

# Uncomment to customize email template
# [auth.email.template.invite]
# subject = "You have been invited"
# content_path = "./supabase/templates/invite.html"

[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = false
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = false
# Template for sending OTP to users
template = "Your code is {{ .Code }}"
# Controls the minimum amount of time that must pass before sending another sms otp.
max_frequency = "5s"

# Use pre-defined map of phone number to OTP for testing.
# [auth.sms.test_otp]
# 4152127777 = "123456"

# Configure logged in session timeouts.
# [auth.sessions]
# Force log out after the specified duration.
# timebox = "24h"
# Force log out if the user has been inactive longer than the specified duration.
# inactivity_timeout = "8h"

# This hook runs before a token is issued and allows you to add additional claims based on the authentication method used.
# [auth.hook.custom_access_token]
# enabled = true
# uri = "pg-functions://<database>/<schema>/<hook_name>"

# Configure one of the supported SMS providers: `twilio`, `twilio_verify`, `messagebird`, `textlocal`, `vonage`.
[auth.sms.twilio]
enabled = false
account_sid = ""
message_service_sid = ""
# DO NOT commit your Twilio auth token to git. Use environment variable substitution instead:
auth_token = "env(SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN)"

# Multi-factor-authentication is available to Supabase Pro plan.
[auth.mfa]
# Control how many MFA factors can be enrolled at once per user.
max_enrolled_factors = 10

# Control MFA via App Authenticator (TOTP)
[auth.mfa.totp]
enroll_enabled = false
verify_enabled = false

# Configure MFA via Phone Messaging
[auth.mfa.phone]
enroll_enabled = false
verify_enabled = false
otp_length = 6
template = "Your code is {{ .Code }}"
max_frequency = "5s"

# Configure MFA via WebAuthn
# [auth.mfa.web_authn]
# enroll_enabled = true
# verify_enabled = true

# Use an external OAuth provider. The full list of providers are: `apple`, `azure`, `bitbucket`,
# `discord`, `facebook`, `github`, `gitlab`, `google`, `keycloak`, `linkedin_oidc`, `notion`, `twitch`,
# `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
client_id = ""
# DO NOT commit your OAuth provider secret to git. Use environment variable substitution instead:
secret = "env(SUPABASE_AUTH_EXTERNAL_APPLE_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = ""
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = ""
# If enabled, the nonce check will be skipped. Required for local sign in with Google auth.
skip_nonce_check = false

# Use Firebase Auth as a third-party provider alongside Supabase Auth.
[auth.third_party.firebase]
enabled = false
# project_id = "my-firebase-project"

# Use Auth0 as a third-party provider alongside Supabase Auth.
[auth.third_party.auth0]
enabled = false
# tenant = "my-auth0-tenant"
# tenant_region = "us"

# Use AWS Cognito (Amplify) as a third-party provider alongside Supabase Auth.
[auth.third_party.aws_cognito]
enabled = false
# user_pool_id = "my-user-pool-id"
# user_pool_region = "us-east-1"

[edge_runtime]
enabled = true
# Configure one of the supported request policies: `oneshot`, `per_worker`.
# Use `oneshot` for hot reload, or `per_worker` for load testing.
policy = "oneshot"
# Port to attach the Chrome inspector for debugging edge functions.
inspector_port = 8083

# Use these configurations to customize your Edge Function.
# [functions.MY_FUNCTION_NAME]
# enabled = true
# verify_jwt = true
# import_map = "./functions/MY_FUNCTION_NAME/deno.json"
# Uncomment to specify a custom file path to the entrypoint.
# Supported file extensions are: .ts, .js, .mjs, .jsx, .tsx
# entrypoint = "./functions/MY_FUNCTION_NAME/index.ts"
# Specifies static files to be bundled with the function. Supports glob patterns.
# For example, if you want to serve static HTML pages in your function:
# static_files = [ "./functions/MY_FUNCTION_NAME/*.html" ]

[analytics]
enabled = true
port = 54327
# Configure one of the supported backends: `postgres`, `bigquery`.
backend = "postgres"

# Experimental features may be deprecated any time
[experimental]
# Configures Postgres storage engine to use OrioleDB (S3)
orioledb_version = ""
# Configures S3 bucket URL, eg. <bucket_name>.s3-<region>.amazonaws.com
s3_host = "env(S3_HOST)"
# Configures S3 bucket region, eg. us-east-1
s3_region = "env(S3_REGION)"
# Configures AWS_ACCESS_KEY_ID for S3 bucket
s3_access_key = "env(S3_ACCESS_KEY)"
# Configures AWS_SECRET_ACCESS_KEY for S3 bucket
s3_secret_key = "env(S3_SECRET_KEY)"

[inbucket]
enabled = true
# Port to use for the email testing server web interface.
port = 54324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326
# admin_email = "admin@email.com"
# sender_name = "Admin"

================
File: supabase/README.md
================
# Win of the Day - Supabase Schema

This directory contains the database schema and migrations for the Win of the Day application. The schema is designed to be simple, maintainable, and focused on the core features of sharing and celebrating daily wins.

## Schema Structure

The database schema is organized into logical files, each handling a specific aspect of the application:

1. `01_profiles.sql`: User profiles and authentication
   - Profiles table with basic user information
   - Automatic profile creation on user signup
   - RLS policies for profile access

2. `02_social.sql`: Social relationships
   - Follows system for connecting users
   - One-way follow relationships (like Twitter/Instagram)
   - RLS policies for follow management

3. `03_posts.sql`: Posts and interactions
   - Posts table for sharing wins
   - Likes for engaging with posts
   - Post images support
   - RLS policies for post privacy

4. `04_categories.sql`: Win categorization
   - Predefined win categories
   - Post categorization system
   - Default categories (Health, Work, etc.)
   - RLS policies for categories

5. `05_habits.sql`: Habits and tracking
   - Habits table for recurring wins
   - Habit completion tracking
   - RLS policies for habit privacy

6. `06_storage.sql`: File storage
   - Storage bucket for post images
   - Security policies for file access

## Security Model

- Row Level Security (RLS) is enabled on all tables
- Each table has specific policies for:
  - SELECT: Who can view the data
  - INSERT: Who can create new records
  - UPDATE: Who can modify existing records
  - DELETE: Who can remove records

## Making Schema Changes

When making changes to the schema, follow these guidelines:

1. Create a new migration file in the `examples/` directory
2. Name it following the pattern: `YYYYMMDD_XX_description.sql`
3. Include both `up.sql` (changes) and `down.sql` (rollback)
4. Test migrations locally before applying to production
5. Document changes in this README

## Common Operations

### Adding a New Table
```sql
-- Create the table
create table if not exists public.new_table (
    id uuid default gen_random_uuid() primary key,
    created_at timestamp with time zone default timezone('utc', now()) not null
);

-- Enable RLS
alter table public.new_table enable row level security;

-- Create policies
create policy "Policy name"
    on new_table for select
    using (true);
```

### Modifying an Existing Table
```sql
-- Add a column
alter table public.existing_table
add column if not exists new_column text;

-- Add a constraint
alter table public.existing_table
add constraint constraint_name check (condition);

-- Create an index
create index if not exists idx_name
on public.existing_table(column_name);
```

### Adding RLS Policies
```sql
-- Basic select policy
create policy "Select policy"
    on table_name for select
    using (true);

-- Owner-only policy
create policy "Owner only"
    on table_name for all
    using (auth.uid() = user_id);
```

## Development Workflow

1. Make changes in a development environment first
2. Test thoroughly with sample data
3. Create migration files in `examples/`
4. Apply migrations to staging
5. Test in staging environment
6. Apply to production during low-traffic periods

## Best Practices

1. Always enable RLS on new tables
2. Include appropriate indexes for foreign keys
3. Add appropriate constraints to ensure data integrity
4. Document all changes in migration files
5. Keep migrations atomic and focused
6. Include rollback instructions in `down.sql`
7. Test both applying and rolling back migrations

================
File: utils/supabase/client.js
================
'use client';

import { createBrowserClient } from '@supabase/ssr';

let supabaseInstance = null;

const getSiteUrl = () => {
  if (process.env.NODE_ENV === 'development') {
    return 'http://localhost:3000';
  }

  if (process.env.VERCEL_ENV === 'preview') {
    return 'https://preview.dailywin.app';
  }

  if (process.env.VERCEL_ENV === 'production') {
    return 'https://dailywin.app';
  }

  if (process.env.NEXT_PUBLIC_SITE_URL) {
    return process.env.NEXT_PUBLIC_SITE_URL;
  }

  return window.location.origin;
};

/**
 * Creates a Supabase client for browser usage with session handling
 */
export function createClient() {
  if (supabaseInstance) return supabaseInstance;

  const siteUrl = getSiteUrl();

  console.log('Creating Supabase browser client', {
    env: process.env.NODE_ENV,
    vercelEnv: process.env.VERCEL_ENV,
    siteUrl,
    origin: typeof window !== 'undefined' ? window.location.origin : null
  });

  supabaseInstance = createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
    {
      auth: {
        autoRefreshToken: true,
        persistSession: true,
        detectSessionInUrl: false,
        flowType: 'pkce',
        pkce: {
          codeChallengeMethod: 'S256'
        },
        redirectTo: `${siteUrl}/api/auth/callback`,
        site_url: siteUrl
      },
      realtime: {
        params: {
          eventsPerSecond: 10
        }
      }
    }
  );

  // Set up auth state change listener
  supabaseInstance.auth.onAuthStateChange((event, session) => {
    console.log('Auth state changed:', {
      event,
      userId: session?.user?.id,
      email: session?.user?.email,
      env: process.env.NODE_ENV,
      vercelEnv: process.env.VERCEL_ENV
    });
  });

  return supabaseInstance;
}

/**
 * Gets the current session if it exists
 */
export async function getCurrentSession() {
  const supabase = createClient();
  const { data: { session }, error } = await supabase.auth.getSession();
  if (error) {
    console.error('Error getting session:', error);
    return null;
  }
  return session;
}

/**
 * Gets the current user if authenticated
 */
export async function getCurrentUser() {
  const session = await getCurrentSession();
  return session?.user ?? null;
}

/**
 * Helper function to update a user's profile (client-side)
 */
export async function updateProfile(userId, updates) {
  try {
    const supabase = createClient();
    
    const { data, error } = await supabase
      .from('profiles')
      .update(updates)
      .eq('id', userId)
      .select()
      .single();

    if (error) throw error;
    return { data, error: null };
  } catch (error) {
    console.error('Error updating profile:', error);
    return { data: null, error };
  }
}

/**
 * Helper function to get a user's profile (client-side)
 */
export async function getProfile(userId) {
  try {
    const supabase = createClient();
    
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single();

    if (error) throw error;
    return { data, error: null };
  } catch (error) {
    console.error('Error getting profile:', error);
    return { data: null, error };
  }
}

================
File: utils/supabase/middleware.js
================
import { NextResponse } from 'next/server';
import { createClient } from './server';
import { middlewareLogger as logger } from '../logger';

// Cache session refresh timestamps to prevent too frequent refreshes
const SESSION_REFRESH_CACHE = new Map();
const SESSION_REFRESH_INTERVAL = 5 * 60 * 1000; // 5 minutes

export async function updateSession(request) {
  const requestUrl = new URL(request.url);
  const baseUrl = process.env.NODE_ENV === 'development'
    ? 'http://localhost:3000'
    : process.env.NEXT_PUBLIC_SITE_URL;

  try {
    // Create an unmodified response
    let response = NextResponse.next({
      request: {
        headers: request.headers,
      },
    });

    // Create Supabase client
    const supabase = await createClient(request.cookies, response);

    // Check if we need to refresh the session
    const sessionKey = request.cookies.get('sb-ymwdctbvtmejqmialxrg-auth-token')?.value;
    const lastRefresh = SESSION_REFRESH_CACHE.get(sessionKey);
    const now = Date.now();

    let session = null;
    
    if (!lastRefresh || (now - lastRefresh) > SESSION_REFRESH_INTERVAL) {
      // Only refresh if enough time has passed
      const { data: { session: newSession }, error } = await supabase.auth.getSession();
      
      if (error) {
        logger.error('Session refresh failed', error);
        // Only redirect on auth routes if there's an error
        if (requestUrl.pathname.startsWith('/(authenticated)') || 
            requestUrl.pathname.startsWith('/api/protected')) {
          return NextResponse.redirect(new URL('/', baseUrl));
        }
        // For other routes, just continue without a session
        return response;
      }
      
      session = newSession;
      if (sessionKey) {
        SESSION_REFRESH_CACHE.set(sessionKey, now);
      }
    }

    // Handle protected routes
    const isAuthRoute = requestUrl.pathname.startsWith('/(authenticated)') || 
                       requestUrl.pathname.startsWith('/api/protected');
    const isAuthCallback = requestUrl.pathname === '/api/auth/callback';

    if (isAuthRoute && !session) {
      logger.info('Redirecting unauthenticated user from protected route', {
        pathname: requestUrl.pathname
      });
      return NextResponse.redirect(new URL('/', baseUrl));
    }

    return response;
  } catch (e) {
    logger.error('Middleware error', e);
    return NextResponse.next();
  }
}

================
File: utils/supabase/server.js
================
import { createServerClient } from '@supabase/ssr';
import { cookies } from 'next/headers';
import { middlewareLogger as logger } from '../logger';
import { getSiteUrl } from '../config';

/**
 * Creates a Supabase client for server-side usage
 */
export async function createClient(cookieStore = null, response = null) {
  // If no cookieStore provided, use the default from next/headers
  if (!cookieStore) {
    cookieStore = cookies();
  }

  const siteUrl = getSiteUrl();

  logger.info('Creating Supabase server client', {
    env: process.env.NODE_ENV,
    siteUrl,
    vercelUrl: process.env.VERCEL_URL
  });

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
    {
      auth: {
        flowType: 'pkce',
        autoRefreshToken: true,
        detectSessionInUrl: false, // We handle this manually in the callback
        persistSession: true,
        site_url: siteUrl,
        pkce: {
          codeChallengeMethod: 'S256'
        }
      },
      cookies: {
        get(name) {
          const cookie = cookieStore.get(name)?.value;
          logger.cookieOperation('get', name, { value: cookie ? 'present' : 'missing' });
          return cookie;
        },
        set(name, value, options) {
          try {
            const cookieOptions = {
              ...options,
              path: '/',
              secure: process.env.NODE_ENV === 'production',
              sameSite: 'lax'
            };

            logger.cookieOperation('set', name, cookieOptions);

            // If response is provided (middleware case), use response.cookies
            if (response) {
              response.cookies.set(name, value, cookieOptions);
            } else {
              // Otherwise use the cookieStore
              cookieStore.set(name, value, cookieOptions);
            }
          } catch (error) {
            logger.error('Error setting cookie', { name, error });
          }
        },
        remove(name, options) {
          try {
            const cookieOptions = {
              ...options,
              path: '/',
              secure: process.env.NODE_ENV === 'production',
              maxAge: -1
            };

            logger.cookieOperation('remove', name, cookieOptions);

            if (response) {
              response.cookies.set(name, '', cookieOptions);
            } else {
              cookieStore.set(name, '', cookieOptions);
            }
          } catch (error) {
            logger.error('Error removing cookie', { name, error });
          }
        }
      }
    }
  );
}

/**
 * Helper function to update a user's profile (server-side)
 */
export async function updateProfile(userId, updates) {
  try {
    const supabase = await createClient();
    
    const { data, error } = await supabase
      .from('profiles')
      .update(updates)
      .eq('id', userId)
      .select()
      .single();

    if (error) throw error;
    return { data, error: null };
  } catch (error) {
    logger.error('Error updating profile:', error);
    return { data: null, error };
  }
}

/**
 * Helper function to get a user's profile (server-side)
 */
export async function getProfile(userId) {
  try {
    const supabase = await createClient();
    
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single();

    if (error) throw error;
    return { data, error: null };
  } catch (error) {
    logger.error('Error getting profile:', error);
    return { data: null, error };
  }
}

================
File: utils/auth-helpers.js
================
/**
 * @typedef {import('@supabase/supabase-js').User} User
 * @typedef {import('@supabase/supabase-js').Session} Session
 */

import { createServerClient } from '@supabase/ssr';
import { cookies } from 'next/headers';
import { authLogger as logger } from './logger';

/**
 * Error class for auth-related errors
 */
class AuthError extends Error {
  constructor(message, code, originalError = null) {
    super(message);
    this.name = 'AuthError';
    this.code = code;
    this.originalError = originalError;
  }
}

/**
 * Gets the base URL for the current environment
 */
const getBaseUrl = () => {
  return process.env.NODE_ENV === 'development'
    ? 'http://localhost:3000'
    : process.env.NEXT_PUBLIC_SITE_URL;
};

export function getSupabaseCookieClient() {
  const cookieStore = cookies();
  
  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
    {
      cookies: {
        get(name) {
          return cookieStore.get(name)?.value;
        },
        set(name, value, options) {
          cookieStore.set({ name, value, ...options });
        },
        remove(name, options) {
          cookieStore.delete({ name, ...options });
        },
      },
    }
  );
}

/**
 * Updates a user's profile
 * @param {string} userId - The user's ID
 * @param {Object} updates - The profile updates to apply
 * @returns {Promise<Object>} The updated profile
 * @throws {AuthError} If profile update fails
 */
export async function updateProfile(userId, updates) {
  if (!userId) {
    throw new AuthError('User ID is required', 'INVALID_USER_ID');
  }

  try {
    const supabase = getSupabaseCookieClient();

    const { data, error } = await supabase
      .from('profiles')
      .update(updates)
      .eq('id', userId)
      .select()
      .single();

    if (error) throw error;
    return data;
  } catch (error) {
    throw new AuthError('Failed to update profile', 'PROFILE_UPDATE_FAILED', error);
  }
}

/**
 * Gets a user's profile
 * @param {string} userId - The user's ID
 * @returns {Promise<Object>} The user's profile
 * @throws {AuthError} If profile retrieval fails
 */
export async function getProfile(userId) {
  if (!userId) {
    throw new AuthError('User ID is required', 'INVALID_USER_ID');
  }

  try {
    const supabase = getSupabaseCookieClient();

    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single();

    if (error) throw error;
    return data;
  } catch (error) {
    throw new AuthError('Failed to get profile', 'PROFILE_RETRIEVAL_FAILED', error);
  }
}

================
File: utils/config.js
================
const isServer = typeof window === 'undefined';

export function getSiteUrl() {
  // Local development
  if (process.env.NODE_ENV === 'development') {
    return 'http://localhost:3000';
  }

  // Production environment
  if (process.env.VERCEL_ENV === 'production') {
    return 'https://dailywin.app';
  }

  // Preview environment
  if (process.env.VERCEL_ENV === 'preview') {
    return 'https://preview.dailywin.app';
  }

  // If NEXT_PUBLIC_SITE_URL is set, use it as fallback
  if (process.env.NEXT_PUBLIC_SITE_URL) {
    return process.env.NEXT_PUBLIC_SITE_URL;
  }

  // Client-side fallback
  if (!isServer) {
    return window.location.origin;
  }

  throw new Error('Unable to determine site URL');
}

const config = {
  baseUrl: getSiteUrl(),
};

export default config;

================
File: utils/logger.js
================
const LOG_LEVELS = {
  DEBUG: 0,
  INFO: 1,
  WARN: 2,
  ERROR: 3,
};

class Logger {
  constructor(context) {
    this.context = context;
  }

  _formatMessage(level, message, data = null) {
    const timestamp = new Date().toISOString();
    const logData = {
      timestamp,
      level,
      context: this.context,
      message,
      ...(data && { data: this._sanitizeData(data) }),
    };
    return JSON.stringify(logData);
  }

  _sanitizeData(data) {
    // Deep clone the data to avoid modifying the original
    const clonedData = JSON.parse(JSON.stringify(data));
    
    // List of sensitive fields to redact
    const sensitiveFields = ['password', 'token', 'secret', 'key'];
    
    const redact = (obj) => {
      if (!obj || typeof obj !== 'object') return obj;
      
      Object.keys(obj).forEach(key => {
        if (sensitiveFields.some(field => key.toLowerCase().includes(field))) {
          obj[key] = '[REDACTED]';
        } else if (typeof obj[key] === 'object') {
          redact(obj[key]);
        }
      });
      
      return obj;
    };

    return redact(clonedData);
  }

  debug(message, data = null) {
    if (process.env.NODE_ENV !== 'production') {
      console.log(this._formatMessage('DEBUG', message, data));
    }
  }

  info(message, data = null) {
    console.log(this._formatMessage('INFO', message, data));
  }

  warn(message, data = null) {
    console.warn(this._formatMessage('WARN', message, data));
  }

  error(message, error = null, additionalData = null) {
    const errorData = error ? {
      message: error.message,
      name: error.name,
      stack: error.stack,
      ...(error.code && { code: error.code }),
      ...additionalData
    } : additionalData;

    console.error(this._formatMessage('ERROR', message, errorData));
  }

  // Special method for auth-related logging
  authEvent(event, data = null) {
    this.info(`Auth Event: ${event}`, data);
  }

  // Special method for cookie-related logging
  cookieOperation(operation, cookieName, options = null) {
    this.debug(`Cookie ${operation}`, {
      cookie: cookieName,
      ...(options && { options: this._sanitizeData(options) })
    });
  }
}

// Create loggers for different contexts
export const createLogger = (context) => new Logger(context);

// Create commonly used loggers
export const authLogger = createLogger('auth');
export const middlewareLogger = createLogger('middleware');
export const apiLogger = createLogger('api');

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: .windsurfrules
================
You are an expert full-stack web developer specializing in Next.js, React, and Supabase development. Your role is to help developers write high-quality, maintainable code following modern web development best practices.

# Framework and Runtime
framework: nextjs@14.0.4
runtime: node
deployment: vercel

# Frontend
ui_framework: react@18.2.0
styling: 
  - tailwindcss@3.3.5
  - postcss@8.4.32
  - autoprefixer@10.4.16
ui_components:
  - @headlessui/react
  - @heroicons/react@2.0.18
  - lucide-react@0.298.0

# Backend and Database
backend: supabase
database: postgresql
auth: supabase_auth

# Code Quality and Standards
language: typescript
linting: eslint@8.57.0
code_style:
  - use_typescript_types: true
  - prefer_arrow_functions: true
  - use_async_await: true
  - use_functional_components: true

# Project Structure
architecture: app_router
directory_structure:
  app/: Next.js app router pages and routes
  components/: Reusable React components
  public/: Static assets
  styles/: Global styles and Tailwind configurations
  utils/: Helper functions and utilities
  supabase/: Database and backend configurations

# Development Practices
- Use Javascript as the majority of the codebase is written in Javascript, although there is some Typescript
- Follow React hooks pattern
- Implement responsive design using Tailwind classes
- Use server components where possible
- Implement proper error handling
- Follow Next.js App Router conventions
- Use environment variables for sensitive data
- Implement proper authentication flows using Supabase

# Dependencies Management
package_manager: npm
node_version: ">=18.0.0"

# Testing
testing_framework: jest
test_directory: __tests__

# Security
- Store sensitive data in .env.local
- Use Supabase Row Level Security
- Implement proper input validation
- Follow OWASP security guidelines

## Architecture Principles
1. App Structure
   - Follow App Router conventions
   - Group routes logically
   - Separate server/client components
   - Organize by feature/domain
   - Keep components focused and minimal

2. Performance & Data
   - Prefer Server Components
   - Implement proper caching
   - Optimize assets (Next/Image)
   - Handle real-time subscriptions efficiently
   - Do not create your own supabase client in each component but rather make sure you import '../../utils/supabase/*';

3. State & Forms
   - Use appropriate React hooks
   - Implement controlled forms
   - Use server actions where possible
   - Handle loading/error states
   - Manage client-side state minimally

4. Security & Database
   - Implement Row Level Security
   - Design efficient schemas
   - Secure authentication flows
   - Protected routes via middleware
   - Never expose sensitive data client-side

5. UI & Accessibility
   - Use Tailwind efficiently
   - Follow ARIA practices
   - Implement responsive design
   - Maintain consistent components
   - Ensure keyboard navigation

## Development Standards
1. Code Quality
   - Follow ESLint rules
   - Write self-documenting code
   - Implement error boundaries
   - Comment complex logic only

2. Testing & Error Handling
   - Write Jest tests
   - Handle edge cases
   - Validate all inputs
   - Implement proper error states
   - Monitor performance

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [...compat.extends("next/core-web-vitals")];

export default eslintConfig;

================
File: jsconfig.json
================
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./*"]
    }
  }
}

================
File: middleware.js
================
import { createServerClient } from '@supabase/ssr';
import { NextResponse } from 'next/server';

// Security headers to add to all responses
const securityHeaders = {
  'X-DNS-Prefetch-Control': 'on',
  'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',
  'X-Frame-Options': 'SAMEORIGIN',
  'X-Content-Type-Options': 'nosniff',
  'Referrer-Policy': 'strict-origin-when-cross-origin',
  'Permissions-Policy': 'camera=(), microphone=(), geolocation=(), interest-cohort=()',
  'X-XSS-Protection': '1; mode=block'
};

// Use a token bucket algorithm for rate limiting
class TokenBucket {
  static buckets = new Map();
  static cleanup() {
    const now = Date.now();
    for (const [key, bucket] of TokenBucket.buckets) {
      if (now - bucket.lastRefill > 60000) { // Remove buckets older than 1 minute
        TokenBucket.buckets.delete(key);
      }
    }
  }

  constructor(key, capacity = 50, refillRate = 10) { // 50 requests per minute, refill 10 every second
    this.key = key;
    this.capacity = capacity;
    this.refillRate = refillRate;
    this.tokens = capacity;
    this.lastRefill = Date.now();
    TokenBucket.buckets.set(key, this);
  }

  refill() {
    const now = Date.now();
    const timePassed = now - this.lastRefill;
    const refillAmount = (timePassed / 1000) * this.refillRate;
    this.tokens = Math.min(this.capacity, this.tokens + refillAmount);
    this.lastRefill = now;
  }

  tryConsume() {
    this.refill();
    if (this.tokens >= 1) {
      this.tokens -= 1;
      return true;
    }
    return false;
  }
}

// Clean up old buckets periodically
setInterval(() => TokenBucket.cleanup(), 60000);

export async function middleware(req) {
  // Get client IP
  const ip = req.headers.get('x-forwarded-for') || 
             req.headers.get('x-real-ip') || 
             'unknown';
  
  // Check rate limit
  const bucket = TokenBucket.buckets.get(ip) || new TokenBucket(ip);
  if (!bucket.tryConsume()) {
    return new NextResponse(
      JSON.stringify({ error: 'Too many requests' }),
      {
        status: 429,
        headers: {
          'Content-Type': 'application/json',
          'Retry-After': '60',
          ...securityHeaders
        }
      }
    );
  }

  // Create an empty response to start
  const response = NextResponse.next();

  // Create Supabase client with response for cookie management
  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
    {
      cookies: {
        get: (name) => req.cookies.get(name)?.value,
        set: (name, value, options) => {
          response.cookies.set({
            name,
            value,
            ...options,
            path: '/',
            secure: process.env.NODE_ENV === 'production',
          });
        },
        remove: (name, options) => {
          response.cookies.set({
            name,
            value: '',
            ...options,
            path: '/',
            secure: process.env.NODE_ENV === 'production',
          });
        },
      },
    }
  );

  // Refresh session if needed
  await supabase.auth.getSession();
  
  // Add security headers and pathname
  Object.entries(securityHeaders).forEach(([key, value]) => {
    response.headers.set(key, value);
  });
  response.headers.set('x-pathname', req.nextUrl.pathname);

  return response;
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public folder
     * Feel free to modify this pattern to include more paths.
     */
    '/((?!_next/static|_next/image|favicon.ico|public/|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}

================
File: next.config.js
================
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  images: {
    domains: [
      'lh3.googleusercontent.com', // Google OAuth profile pictures
      'avatars.githubusercontent.com', // GitHub profile pictures (if you add GitHub auth)
      'yvdkzqcqmqmgvwxjxiop.supabase.co' // Your Supabase storage domain
    ]
  },
  webpack: (config, { isServer }) => {
    // Ignore WebSocket warnings
    if (!isServer) {
      config.resolve.fallback = {
        ...config.resolve.fallback,
        ws: false,
      };
    }
    return config;
  },
}

module.exports = nextConfig

================
File: package.json
================
{
  "name": "wofd",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@headlessui/react": "^1.7.19",
    "@heroicons/react": "^2.0.18",
    "@supabase/ssr": "^0.5.2",
    "@supabase/supabase-js": "^2.38.4",
    "bcryptjs": "^2.4.3",
    "bufferutil": "^4.0.9",
    "date-fns": "^4.1.0",
    "lucide-react": "^0.298.0",
    "next": "14.0.4",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "utf-8-validate": "^6.0.5"
  },
  "devDependencies": {
    "@types/react": "19.0.10",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.57.0",
    "eslint-config-next": "14.0.4",
    "postcss": "^8.4.32",
    "postcss-import": "^16.1.0",
    "tailwindcss": "^3.3.5"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# 🌟 Win of the Day

> "Friendship isn't about catching up, it's about never falling behind in the first place."

Win of the Day is a modern social platform that transforms how we maintain meaningful connections. Instead of catching up after long periods, users share their daily wins and reflections, fostering continuous connection with friends and loved ones.

🌐 [Visit Win of the Day](https://www.dailywin.app)

## 🚀 Features

- **📝 Daily Reflections**: Share your daily wins and experiences
- **👥 Friend Connections**: Connect with friends and follow their journey
- **🔄 Real-time Updates**: Stay connected with instant feed updates
- **🔒 Secure Authentication**: Powered by Supabase with email and social login
- **💅 Modern Design**: Clean, responsive interface built with Tailwind CSS
- **📱 Mobile-First**: Optimized for both desktop and mobile experiences
- **🌈 Progressive Web App**: Install on your device for a native app feel

## 🛠️ Tech Stack

- **Framework**: [Next.js 14](https://nextjs.org/) with App Router
- **Frontend**: React 18.2
- **Styling**: 
  - [Tailwind CSS](https://tailwindcss.com/)
  - [HeadlessUI](https://headlessui.com/) for accessible components
- **Backend & Database**: 
  - [Supabase](https://supabase.com/) for authentication and database
  - PostgreSQL for data storage
- **Date Handling**: [date-fns](https://date-fns.org/)
- **Icons**: [Lucide React](https://lucide.dev/)

## 🌐 Environments

- Production: [dailywin.app](https://www.dailywin.app)
- Preview: [preview.dailywin.app](https://preview.dailywin.app)
- Development: `localhost:3000`

## 🚀 Local Development Setup

1. Clone the repository:
   ```bash
   git clone https://github.com/noelhayes/win-of-the-day.git
   cd win-of-the-day
   ```

2. Install dependencies:
   ```bash
   npm install
   ```

3. Set up environment variables:
   ```bash
   cp .env.example .env.local
   ```
   
   Required environment variables:
   ```
   NEXT_PUBLIC_SUPABASE_URL=supabase_project_url
   NEXT_PUBLIC_SUPABASE_ANON_KEY=supabase_anon_key
   SUPABASE_SERVICE_ROLE_KEY=supabase_service_role_key
   NEXT_PUBLIC_SITE_URL=https://www.dailywin.app
   ```

4. Start the development server:

   ```bash
   npm run dev
   ```

## 🔒 Authentication

The app uses Supabase Auth with Google OAuth. The auth flow varies by environment:

- Development: Redirects to localhost:3000
- Preview: Uses preview.dailywin.app
- Production: Uses www.dailywin.app

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f0f9ff',
          100: '#e0f2fe',
          200: '#bae6fd',
          300: '#7dd3fc',
          400: '#38bdf8',
          500: '#0ea5e9',
          600: '#0284c7',
          700: '#0369a1',
        },
        surface: {
          50: '#f8fafc',
          100: '#f1f5f9',
          200: '#e2e8f0',
          300: '#cbd5e1',
          800: '#1e293b',
          900: '#0f172a',
        },
        background: 'var(--background)',
        foreground: 'var(--foreground)',
      },
      spacing: {
        '18': '4.5rem',
      },
      boxShadow: {
        'soft': '0 2px 15px -3px rgba(0, 0, 0, 0.07), 0 10px 20px -2px rgba(0, 0, 0, 0.04)',
      },
    },
  },
  plugins: [],
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "noEmit": true,
    "incremental": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    ".next/types/**/*.ts",
    "**/*.ts",
    "**/*.tsx"
  ],
  "exclude": [
    "node_modules"
  ]
}



================================================================
End of Codebase
================================================================
